# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetUserResult',
    'AwaitableGetUserResult',
    'get_user',
    'get_user_output',
]

@pulumi.output_type
class GetUserResult:
    """
    A collection of values returned by getUser.
    """
    def __init__(__self__, active=None, email=None, full_name=None, id=None, preferred_name=None, search_email=None, search_full_name=None):
        if active and not isinstance(active, bool):
            raise TypeError("Expected argument 'active' to be a bool")
        pulumi.set(__self__, "active", active)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if full_name and not isinstance(full_name, str):
            raise TypeError("Expected argument 'full_name' to be a str")
        pulumi.set(__self__, "full_name", full_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if preferred_name and not isinstance(preferred_name, str):
            raise TypeError("Expected argument 'preferred_name' to be a str")
        pulumi.set(__self__, "preferred_name", preferred_name)
        if search_email and not isinstance(search_email, str):
            raise TypeError("Expected argument 'search_email' to be a str")
        pulumi.set(__self__, "search_email", search_email)
        if search_full_name and not isinstance(search_full_name, str):
            raise TypeError("Expected argument 'search_full_name' to be a str")
        pulumi.set(__self__, "search_full_name", search_full_name)

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[str]:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="preferredName")
    def preferred_name(self) -> str:
        """
        **(String)** The preferred name of the user.
        """
        return pulumi.get(self, "preferred_name")

    @property
    @pulumi.getter(name="searchEmail")
    def search_email(self) -> Optional[str]:
        return pulumi.get(self, "search_email")

    @property
    @pulumi.getter(name="searchFullName")
    def search_full_name(self) -> Optional[str]:
        return pulumi.get(self, "search_full_name")


class AwaitableGetUserResult(GetUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserResult(
            active=self.active,
            email=self.email,
            full_name=self.full_name,
            id=self.id,
            preferred_name=self.preferred_name,
            search_email=self.search_email,
            search_full_name=self.search_full_name)


def get_user(active: Optional[bool] = None,
             email: Optional[str] = None,
             full_name: Optional[str] = None,
             search_email: Optional[str] = None,
             search_full_name: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserResult:
    """
    Represents a user
    ## Example Usage

    ```python
    import pulumi
    import pulumi_konnect as konnect

    example = konnect.get_user(search_email="@example.com")
    ```


    :param bool active: **(Optional, Boolean)** The filter flag to apply to the active flag of the user. Uses equality. Default: `true`
    :param str email: **(Optional, String)** The filter string to apply to the email of the user. Uses equality.
    :param str full_name: **(Optional, String)** The filter string to apply to the full name of the user. Uses equality.
    :param str search_email: **(Optional, String)** The search string to apply to the email of the user. Uses contains.
    :param str search_full_name: **(Optional, String)** The search string to apply to the full name of the user. Uses contains.
    """
    __args__ = dict()
    __args__['active'] = active
    __args__['email'] = email
    __args__['fullName'] = full_name
    __args__['searchEmail'] = search_email
    __args__['searchFullName'] = search_full_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult).value

    return AwaitableGetUserResult(
        active=pulumi.get(__ret__, 'active'),
        email=pulumi.get(__ret__, 'email'),
        full_name=pulumi.get(__ret__, 'full_name'),
        id=pulumi.get(__ret__, 'id'),
        preferred_name=pulumi.get(__ret__, 'preferred_name'),
        search_email=pulumi.get(__ret__, 'search_email'),
        search_full_name=pulumi.get(__ret__, 'search_full_name'))


@_utilities.lift_output_func(get_user)
def get_user_output(active: Optional[pulumi.Input[Optional[bool]]] = None,
                    email: Optional[pulumi.Input[Optional[str]]] = None,
                    full_name: Optional[pulumi.Input[Optional[str]]] = None,
                    search_email: Optional[pulumi.Input[Optional[str]]] = None,
                    search_full_name: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUserResult]:
    """
    Represents a user
    ## Example Usage

    ```python
    import pulumi
    import pulumi_konnect as konnect

    example = konnect.get_user(search_email="@example.com")
    ```


    :param bool active: **(Optional, Boolean)** The filter flag to apply to the active flag of the user. Uses equality. Default: `true`
    :param str email: **(Optional, String)** The filter string to apply to the email of the user. Uses equality.
    :param str full_name: **(Optional, String)** The filter string to apply to the full name of the user. Uses equality.
    :param str search_email: **(Optional, String)** The search string to apply to the email of the user. Uses contains.
    :param str search_full_name: **(Optional, String)** The search string to apply to the full name of the user. Uses contains.
    """
    ...
