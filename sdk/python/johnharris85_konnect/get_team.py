# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetTeamResult',
    'AwaitableGetTeamResult',
    'get_team',
    'get_team_output',
]

@pulumi.output_type
class GetTeamResult:
    """
    A collection of values returned by getTeam.
    """
    def __init__(__self__, description=None, id=None, is_predefined=None, name=None, search_name=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_predefined and not isinstance(is_predefined, bool):
            raise TypeError("Expected argument 'is_predefined' to be a bool")
        pulumi.set(__self__, "is_predefined", is_predefined)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if search_name and not isinstance(search_name, str):
            raise TypeError("Expected argument 'search_name' to be a str")
        pulumi.set(__self__, "search_name", search_name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        **(String)** The description of the team.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPredefined")
    def is_predefined(self) -> bool:
        """
        **(Boolean)** Whether the team is predefined.
        """
        return pulumi.get(self, "is_predefined")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="searchName")
    def search_name(self) -> Optional[str]:
        return pulumi.get(self, "search_name")


class AwaitableGetTeamResult(GetTeamResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTeamResult(
            description=self.description,
            id=self.id,
            is_predefined=self.is_predefined,
            name=self.name,
            search_name=self.search_name)


def get_team(name: Optional[str] = None,
             search_name: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTeamResult:
    """
    Represents a team
    ## Example Usage

    ```python
    import pulumi
    import pulumi_konnect as konnect

    example = konnect.get_team(search_name="Panther")
    ```


    :param str name: **(Optional, String)** The filter string to apply to the name of the team. Uses equality.
    :param str search_name: **(Optional, String)** The search string to apply to the name of the team. Uses contains.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['searchName'] = search_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getTeam:getTeam', __args__, opts=opts, typ=GetTeamResult).value

    return AwaitableGetTeamResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        is_predefined=pulumi.get(__ret__, 'is_predefined'),
        name=pulumi.get(__ret__, 'name'),
        search_name=pulumi.get(__ret__, 'search_name'))


@_utilities.lift_output_func(get_team)
def get_team_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                    search_name: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTeamResult]:
    """
    Represents a team
    ## Example Usage

    ```python
    import pulumi
    import pulumi_konnect as konnect

    example = konnect.get_team(search_name="Panther")
    ```


    :param str name: **(Optional, String)** The filter string to apply to the name of the team. Uses equality.
    :param str search_name: **(Optional, String)** The search string to apply to the name of the team. Uses contains.
    """
    ...
