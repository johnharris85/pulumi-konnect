# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['IdentityProviderArgs', 'IdentityProvider']

@pulumi.input_type
class IdentityProviderArgs:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 email_claim_mapping: Optional[pulumi.Input[str]] = None,
                 groups_claim_mapping: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 login_path: Optional[pulumi.Input[str]] = None,
                 name_claim_mapping: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a IdentityProvider resource.
        :param pulumi.Input[str] client_id: **(Optional, String)** Client ID of the identity provider.
        :param pulumi.Input[str] client_secret: **(Optional, String, Sensitive)** Client secret of the identity provider.
        :param pulumi.Input[str] email_claim_mapping: **(Optional, String)** Claim to map email for the identity provider.
        :param pulumi.Input[str] groups_claim_mapping: **(Optional, String)** Claim to map groups for the identity provider.
        :param pulumi.Input[str] issuer: **(Optional, String)** Issuer of the identity provider.
        :param pulumi.Input[str] login_path: **(Optional, String)** Login path of the identity provider.
        :param pulumi.Input[str] name_claim_mapping: **(Optional, String)** Claim to map name for the identity provider.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: **(Optional, List of String)** Scopes of the identity provider.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if email_claim_mapping is not None:
            pulumi.set(__self__, "email_claim_mapping", email_claim_mapping)
        if groups_claim_mapping is not None:
            pulumi.set(__self__, "groups_claim_mapping", groups_claim_mapping)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if login_path is not None:
            pulumi.set(__self__, "login_path", login_path)
        if name_claim_mapping is not None:
            pulumi.set(__self__, "name_claim_mapping", name_claim_mapping)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Client ID of the identity provider.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String, Sensitive)** Client secret of the identity provider.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="emailClaimMapping")
    def email_claim_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Claim to map email for the identity provider.
        """
        return pulumi.get(self, "email_claim_mapping")

    @email_claim_mapping.setter
    def email_claim_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_claim_mapping", value)

    @property
    @pulumi.getter(name="groupsClaimMapping")
    def groups_claim_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Claim to map groups for the identity provider.
        """
        return pulumi.get(self, "groups_claim_mapping")

    @groups_claim_mapping.setter
    def groups_claim_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "groups_claim_mapping", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Issuer of the identity provider.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="loginPath")
    def login_path(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Login path of the identity provider.
        """
        return pulumi.get(self, "login_path")

    @login_path.setter
    def login_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_path", value)

    @property
    @pulumi.getter(name="nameClaimMapping")
    def name_claim_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Claim to map name for the identity provider.
        """
        return pulumi.get(self, "name_claim_mapping")

    @name_claim_mapping.setter
    def name_claim_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_claim_mapping", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        **(Optional, List of String)** Scopes of the identity provider.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)


@pulumi.input_type
class _IdentityProviderState:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 email_claim_mapping: Optional[pulumi.Input[str]] = None,
                 groups_claim_mapping: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 login_path: Optional[pulumi.Input[str]] = None,
                 name_claim_mapping: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering IdentityProvider resources.
        :param pulumi.Input[str] client_id: **(Optional, String)** Client ID of the identity provider.
        :param pulumi.Input[str] client_secret: **(Optional, String, Sensitive)** Client secret of the identity provider.
        :param pulumi.Input[str] email_claim_mapping: **(Optional, String)** Claim to map email for the identity provider.
        :param pulumi.Input[str] groups_claim_mapping: **(Optional, String)** Claim to map groups for the identity provider.
        :param pulumi.Input[str] issuer: **(Optional, String)** Issuer of the identity provider.
        :param pulumi.Input[str] login_path: **(Optional, String)** Login path of the identity provider.
        :param pulumi.Input[str] name_claim_mapping: **(Optional, String)** Claim to map name for the identity provider.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: **(Optional, List of String)** Scopes of the identity provider.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if email_claim_mapping is not None:
            pulumi.set(__self__, "email_claim_mapping", email_claim_mapping)
        if groups_claim_mapping is not None:
            pulumi.set(__self__, "groups_claim_mapping", groups_claim_mapping)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if login_path is not None:
            pulumi.set(__self__, "login_path", login_path)
        if name_claim_mapping is not None:
            pulumi.set(__self__, "name_claim_mapping", name_claim_mapping)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Client ID of the identity provider.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String, Sensitive)** Client secret of the identity provider.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="emailClaimMapping")
    def email_claim_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Claim to map email for the identity provider.
        """
        return pulumi.get(self, "email_claim_mapping")

    @email_claim_mapping.setter
    def email_claim_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_claim_mapping", value)

    @property
    @pulumi.getter(name="groupsClaimMapping")
    def groups_claim_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Claim to map groups for the identity provider.
        """
        return pulumi.get(self, "groups_claim_mapping")

    @groups_claim_mapping.setter
    def groups_claim_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "groups_claim_mapping", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Issuer of the identity provider.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="loginPath")
    def login_path(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Login path of the identity provider.
        """
        return pulumi.get(self, "login_path")

    @login_path.setter
    def login_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_path", value)

    @property
    @pulumi.getter(name="nameClaimMapping")
    def name_claim_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Claim to map name for the identity provider.
        """
        return pulumi.get(self, "name_claim_mapping")

    @name_claim_mapping.setter
    def name_claim_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_claim_mapping", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        **(Optional, List of String)** Scopes of the identity provider.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)


class IdentityProvider(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 email_claim_mapping: Optional[pulumi.Input[str]] = None,
                 groups_claim_mapping: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 login_path: Optional[pulumi.Input[str]] = None,
                 name_claim_mapping: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Represents identity provider settings
        ## Example Usage

        ```python
        import pulumi
        import johnharris85_konnect as konnect

        example = konnect.IdentityProvider("example",
            client_id="XXXX",
            client_secret="YYYY",
            email_claim_mapping="email",
            groups_claim_mapping="groups",
            issuer="https://example.com",
            login_path="login",
            name_claim_mapping="name",
            scopes=[
                "email",
                "openid",
                "profile",
            ])
        ```

        ## Import

        Identity provider can be imported using a proper value of `id` as described above

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_id: **(Optional, String)** Client ID of the identity provider.
        :param pulumi.Input[str] client_secret: **(Optional, String, Sensitive)** Client secret of the identity provider.
        :param pulumi.Input[str] email_claim_mapping: **(Optional, String)** Claim to map email for the identity provider.
        :param pulumi.Input[str] groups_claim_mapping: **(Optional, String)** Claim to map groups for the identity provider.
        :param pulumi.Input[str] issuer: **(Optional, String)** Issuer of the identity provider.
        :param pulumi.Input[str] login_path: **(Optional, String)** Login path of the identity provider.
        :param pulumi.Input[str] name_claim_mapping: **(Optional, String)** Claim to map name for the identity provider.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: **(Optional, List of String)** Scopes of the identity provider.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IdentityProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Represents identity provider settings
        ## Example Usage

        ```python
        import pulumi
        import johnharris85_konnect as konnect

        example = konnect.IdentityProvider("example",
            client_id="XXXX",
            client_secret="YYYY",
            email_claim_mapping="email",
            groups_claim_mapping="groups",
            issuer="https://example.com",
            login_path="login",
            name_claim_mapping="name",
            scopes=[
                "email",
                "openid",
                "profile",
            ])
        ```

        ## Import

        Identity provider can be imported using a proper value of `id` as described above

        :param str resource_name: The name of the resource.
        :param IdentityProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IdentityProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 email_claim_mapping: Optional[pulumi.Input[str]] = None,
                 groups_claim_mapping: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 login_path: Optional[pulumi.Input[str]] = None,
                 name_claim_mapping: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IdentityProviderArgs.__new__(IdentityProviderArgs)

            __props__.__dict__["client_id"] = client_id
            __props__.__dict__["client_secret"] = None if client_secret is None else pulumi.Output.secret(client_secret)
            __props__.__dict__["email_claim_mapping"] = email_claim_mapping
            __props__.__dict__["groups_claim_mapping"] = groups_claim_mapping
            __props__.__dict__["issuer"] = issuer
            __props__.__dict__["login_path"] = login_path
            __props__.__dict__["name_claim_mapping"] = name_claim_mapping
            __props__.__dict__["scopes"] = scopes
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["clientSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(IdentityProvider, __self__).__init__(
            'konnect:index/identityProvider:IdentityProvider',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            client_secret: Optional[pulumi.Input[str]] = None,
            email_claim_mapping: Optional[pulumi.Input[str]] = None,
            groups_claim_mapping: Optional[pulumi.Input[str]] = None,
            issuer: Optional[pulumi.Input[str]] = None,
            login_path: Optional[pulumi.Input[str]] = None,
            name_claim_mapping: Optional[pulumi.Input[str]] = None,
            scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'IdentityProvider':
        """
        Get an existing IdentityProvider resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_id: **(Optional, String)** Client ID of the identity provider.
        :param pulumi.Input[str] client_secret: **(Optional, String, Sensitive)** Client secret of the identity provider.
        :param pulumi.Input[str] email_claim_mapping: **(Optional, String)** Claim to map email for the identity provider.
        :param pulumi.Input[str] groups_claim_mapping: **(Optional, String)** Claim to map groups for the identity provider.
        :param pulumi.Input[str] issuer: **(Optional, String)** Issuer of the identity provider.
        :param pulumi.Input[str] login_path: **(Optional, String)** Login path of the identity provider.
        :param pulumi.Input[str] name_claim_mapping: **(Optional, String)** Claim to map name for the identity provider.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: **(Optional, List of String)** Scopes of the identity provider.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IdentityProviderState.__new__(_IdentityProviderState)

        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["client_secret"] = client_secret
        __props__.__dict__["email_claim_mapping"] = email_claim_mapping
        __props__.__dict__["groups_claim_mapping"] = groups_claim_mapping
        __props__.__dict__["issuer"] = issuer
        __props__.__dict__["login_path"] = login_path
        __props__.__dict__["name_claim_mapping"] = name_claim_mapping
        __props__.__dict__["scopes"] = scopes
        return IdentityProvider(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String)** Client ID of the identity provider.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String, Sensitive)** Client secret of the identity provider.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="emailClaimMapping")
    def email_claim_mapping(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String)** Claim to map email for the identity provider.
        """
        return pulumi.get(self, "email_claim_mapping")

    @property
    @pulumi.getter(name="groupsClaimMapping")
    def groups_claim_mapping(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String)** Claim to map groups for the identity provider.
        """
        return pulumi.get(self, "groups_claim_mapping")

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String)** Issuer of the identity provider.
        """
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="loginPath")
    def login_path(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String)** Login path of the identity provider.
        """
        return pulumi.get(self, "login_path")

    @property
    @pulumi.getter(name="nameClaimMapping")
    def name_claim_mapping(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String)** Claim to map name for the identity provider.
        """
        return pulumi.get(self, "name_claim_mapping")

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        **(Optional, List of String)** Scopes of the identity provider.
        """
        return pulumi.get(self, "scopes")

