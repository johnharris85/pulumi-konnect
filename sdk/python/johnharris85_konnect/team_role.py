# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['TeamRoleArgs', 'TeamRole']

@pulumi.input_type
class TeamRoleArgs:
    def __init__(__self__, *,
                 entity_id: pulumi.Input[str],
                 entity_region: pulumi.Input[str],
                 entity_type_display_name: pulumi.Input[str],
                 role_display_name: pulumi.Input[str],
                 team_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a TeamRole resource.
        :param pulumi.Input[str] entity_id: **(Required, ForceNew, String)** The id of the entity for which the role applies.
        :param pulumi.Input[str] entity_region: **(Required, ForceNew, String)** The region of the entity for which the role applies.
        :param pulumi.Input[str] entity_type_display_name: **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
        :param pulumi.Input[str] role_display_name: **(Required, ForceNew, String)** The display name of the role.
        :param pulumi.Input[str] team_id: **(Required, ForceNew, String)** The id of the team assigned the role
        """
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_region", entity_region)
        pulumi.set(__self__, "entity_type_display_name", entity_type_display_name)
        pulumi.set(__self__, "role_display_name", role_display_name)
        pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Input[str]:
        """
        **(Required, ForceNew, String)** The id of the entity for which the role applies.
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityRegion")
    def entity_region(self) -> pulumi.Input[str]:
        """
        **(Required, ForceNew, String)** The region of the entity for which the role applies.
        """
        return pulumi.get(self, "entity_region")

    @entity_region.setter
    def entity_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_region", value)

    @property
    @pulumi.getter(name="entityTypeDisplayName")
    def entity_type_display_name(self) -> pulumi.Input[str]:
        """
        **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
        """
        return pulumi.get(self, "entity_type_display_name")

    @entity_type_display_name.setter
    def entity_type_display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_type_display_name", value)

    @property
    @pulumi.getter(name="roleDisplayName")
    def role_display_name(self) -> pulumi.Input[str]:
        """
        **(Required, ForceNew, String)** The display name of the role.
        """
        return pulumi.get(self, "role_display_name")

    @role_display_name.setter
    def role_display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_display_name", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Input[str]:
        """
        **(Required, ForceNew, String)** The id of the team assigned the role
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "team_id", value)


@pulumi.input_type
class _TeamRoleState:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_region: Optional[pulumi.Input[str]] = None,
                 entity_type_display_name: Optional[pulumi.Input[str]] = None,
                 role_display_name: Optional[pulumi.Input[str]] = None,
                 team_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TeamRole resources.
        :param pulumi.Input[str] entity_id: **(Required, ForceNew, String)** The id of the entity for which the role applies.
        :param pulumi.Input[str] entity_region: **(Required, ForceNew, String)** The region of the entity for which the role applies.
        :param pulumi.Input[str] entity_type_display_name: **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
        :param pulumi.Input[str] role_display_name: **(Required, ForceNew, String)** The display name of the role.
        :param pulumi.Input[str] team_id: **(Required, ForceNew, String)** The id of the team assigned the role
        """
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_region is not None:
            pulumi.set(__self__, "entity_region", entity_region)
        if entity_type_display_name is not None:
            pulumi.set(__self__, "entity_type_display_name", entity_type_display_name)
        if role_display_name is not None:
            pulumi.set(__self__, "role_display_name", role_display_name)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Required, ForceNew, String)** The id of the entity for which the role applies.
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityRegion")
    def entity_region(self) -> Optional[pulumi.Input[str]]:
        """
        **(Required, ForceNew, String)** The region of the entity for which the role applies.
        """
        return pulumi.get(self, "entity_region")

    @entity_region.setter
    def entity_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_region", value)

    @property
    @pulumi.getter(name="entityTypeDisplayName")
    def entity_type_display_name(self) -> Optional[pulumi.Input[str]]:
        """
        **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
        """
        return pulumi.get(self, "entity_type_display_name")

    @entity_type_display_name.setter
    def entity_type_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type_display_name", value)

    @property
    @pulumi.getter(name="roleDisplayName")
    def role_display_name(self) -> Optional[pulumi.Input[str]]:
        """
        **(Required, ForceNew, String)** The display name of the role.
        """
        return pulumi.get(self, "role_display_name")

    @role_display_name.setter
    def role_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_display_name", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Required, ForceNew, String)** The id of the team assigned the role
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team_id", value)


class TeamRole(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_region: Optional[pulumi.Input[str]] = None,
                 entity_type_display_name: Optional[pulumi.Input[str]] = None,
                 role_display_name: Optional[pulumi.Input[str]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Represents a role assigned to a team to access a given entity

        ## Import

        Team roles can be imported using a proper value of `id` as described above

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] entity_id: **(Required, ForceNew, String)** The id of the entity for which the role applies.
        :param pulumi.Input[str] entity_region: **(Required, ForceNew, String)** The region of the entity for which the role applies.
        :param pulumi.Input[str] entity_type_display_name: **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
        :param pulumi.Input[str] role_display_name: **(Required, ForceNew, String)** The display name of the role.
        :param pulumi.Input[str] team_id: **(Required, ForceNew, String)** The id of the team assigned the role
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TeamRoleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Represents a role assigned to a team to access a given entity

        ## Import

        Team roles can be imported using a proper value of `id` as described above

        :param str resource_name: The name of the resource.
        :param TeamRoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TeamRoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_region: Optional[pulumi.Input[str]] = None,
                 entity_type_display_name: Optional[pulumi.Input[str]] = None,
                 role_display_name: Optional[pulumi.Input[str]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TeamRoleArgs.__new__(TeamRoleArgs)

            if entity_id is None and not opts.urn:
                raise TypeError("Missing required property 'entity_id'")
            __props__.__dict__["entity_id"] = entity_id
            if entity_region is None and not opts.urn:
                raise TypeError("Missing required property 'entity_region'")
            __props__.__dict__["entity_region"] = entity_region
            if entity_type_display_name is None and not opts.urn:
                raise TypeError("Missing required property 'entity_type_display_name'")
            __props__.__dict__["entity_type_display_name"] = entity_type_display_name
            if role_display_name is None and not opts.urn:
                raise TypeError("Missing required property 'role_display_name'")
            __props__.__dict__["role_display_name"] = role_display_name
            if team_id is None and not opts.urn:
                raise TypeError("Missing required property 'team_id'")
            __props__.__dict__["team_id"] = team_id
        super(TeamRole, __self__).__init__(
            'konnect:index/teamRole:TeamRole',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            entity_id: Optional[pulumi.Input[str]] = None,
            entity_region: Optional[pulumi.Input[str]] = None,
            entity_type_display_name: Optional[pulumi.Input[str]] = None,
            role_display_name: Optional[pulumi.Input[str]] = None,
            team_id: Optional[pulumi.Input[str]] = None) -> 'TeamRole':
        """
        Get an existing TeamRole resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] entity_id: **(Required, ForceNew, String)** The id of the entity for which the role applies.
        :param pulumi.Input[str] entity_region: **(Required, ForceNew, String)** The region of the entity for which the role applies.
        :param pulumi.Input[str] entity_type_display_name: **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
        :param pulumi.Input[str] role_display_name: **(Required, ForceNew, String)** The display name of the role.
        :param pulumi.Input[str] team_id: **(Required, ForceNew, String)** The id of the team assigned the role
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TeamRoleState.__new__(_TeamRoleState)

        __props__.__dict__["entity_id"] = entity_id
        __props__.__dict__["entity_region"] = entity_region
        __props__.__dict__["entity_type_display_name"] = entity_type_display_name
        __props__.__dict__["role_display_name"] = role_display_name
        __props__.__dict__["team_id"] = team_id
        return TeamRole(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Output[str]:
        """
        **(Required, ForceNew, String)** The id of the entity for which the role applies.
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityRegion")
    def entity_region(self) -> pulumi.Output[str]:
        """
        **(Required, ForceNew, String)** The region of the entity for which the role applies.
        """
        return pulumi.get(self, "entity_region")

    @property
    @pulumi.getter(name="entityTypeDisplayName")
    def entity_type_display_name(self) -> pulumi.Output[str]:
        """
        **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
        """
        return pulumi.get(self, "entity_type_display_name")

    @property
    @pulumi.getter(name="roleDisplayName")
    def role_display_name(self) -> pulumi.Output[str]:
        """
        **(Required, ForceNew, String)** The display name of the role.
        """
        return pulumi.get(self, "role_display_name")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Output[str]:
        """
        **(Required, ForceNew, String)** The id of the team assigned the role
        """
        return pulumi.get(self, "team_id")

