# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ConsumerArgs', 'Consumer']

@pulumi.input_type
class ConsumerArgs:
    def __init__(__self__, *,
                 runtime_group_id: pulumi.Input[str],
                 custom_id: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Consumer resource.
        :param pulumi.Input[str] runtime_group_id: **(Required, String)** The id of the runtime group.
        :param pulumi.Input[str] custom_id: **(Optional, String)** Field for storing an existing unique ID for the Consumer.
        :param pulumi.Input[str] username: **(Optional, String)** The unique username of the Consumer.
        """
        pulumi.set(__self__, "runtime_group_id", runtime_group_id)
        if custom_id is not None:
            pulumi.set(__self__, "custom_id", custom_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="runtimeGroupId")
    def runtime_group_id(self) -> pulumi.Input[str]:
        """
        **(Required, String)** The id of the runtime group.
        """
        return pulumi.get(self, "runtime_group_id")

    @runtime_group_id.setter
    def runtime_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "runtime_group_id", value)

    @property
    @pulumi.getter(name="customId")
    def custom_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Field for storing an existing unique ID for the Consumer.
        """
        return pulumi.get(self, "custom_id")

    @custom_id.setter
    def custom_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_id", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** The unique username of the Consumer.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _ConsumerState:
    def __init__(__self__, *,
                 consumer_id: Optional[pulumi.Input[str]] = None,
                 custom_id: Optional[pulumi.Input[str]] = None,
                 runtime_group_id: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Consumer resources.
        :param pulumi.Input[str] consumer_id: **(String)** Id of the consumer alone
        :param pulumi.Input[str] custom_id: **(Optional, String)** Field for storing an existing unique ID for the Consumer.
        :param pulumi.Input[str] runtime_group_id: **(Required, String)** The id of the runtime group.
        :param pulumi.Input[str] username: **(Optional, String)** The unique username of the Consumer.
        """
        if consumer_id is not None:
            pulumi.set(__self__, "consumer_id", consumer_id)
        if custom_id is not None:
            pulumi.set(__self__, "custom_id", custom_id)
        if runtime_group_id is not None:
            pulumi.set(__self__, "runtime_group_id", runtime_group_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="consumerId")
    def consumer_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(String)** Id of the consumer alone
        """
        return pulumi.get(self, "consumer_id")

    @consumer_id.setter
    def consumer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_id", value)

    @property
    @pulumi.getter(name="customId")
    def custom_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Field for storing an existing unique ID for the Consumer.
        """
        return pulumi.get(self, "custom_id")

    @custom_id.setter
    def custom_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_id", value)

    @property
    @pulumi.getter(name="runtimeGroupId")
    def runtime_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Required, String)** The id of the runtime group.
        """
        return pulumi.get(self, "runtime_group_id")

    @runtime_group_id.setter
    def runtime_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_group_id", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** The unique username of the Consumer.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class Consumer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_id: Optional[pulumi.Input[str]] = None,
                 runtime_group_id: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Represents a consumer within a runtime group
        ## Example Usage

        ```python
        import pulumi
        import johnharris85_konnect as konnect
        import pulumi_konnect as konnect

        runtime_group = konnect.get_runtime_group(name="TestRuntimeGroup")
        example = konnect.Consumer("example",
            runtime_group_id=runtime_group.id,
            username="testuser",
            custom_id="testcustom")
        ```

        ## Import

        Consumers can be imported using a proper value of `id` as described above

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] custom_id: **(Optional, String)** Field for storing an existing unique ID for the Consumer.
        :param pulumi.Input[str] runtime_group_id: **(Required, String)** The id of the runtime group.
        :param pulumi.Input[str] username: **(Optional, String)** The unique username of the Consumer.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConsumerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Represents a consumer within a runtime group
        ## Example Usage

        ```python
        import pulumi
        import johnharris85_konnect as konnect
        import pulumi_konnect as konnect

        runtime_group = konnect.get_runtime_group(name="TestRuntimeGroup")
        example = konnect.Consumer("example",
            runtime_group_id=runtime_group.id,
            username="testuser",
            custom_id="testcustom")
        ```

        ## Import

        Consumers can be imported using a proper value of `id` as described above

        :param str resource_name: The name of the resource.
        :param ConsumerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConsumerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_id: Optional[pulumi.Input[str]] = None,
                 runtime_group_id: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConsumerArgs.__new__(ConsumerArgs)

            __props__.__dict__["custom_id"] = custom_id
            if runtime_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'runtime_group_id'")
            __props__.__dict__["runtime_group_id"] = runtime_group_id
            __props__.__dict__["username"] = username
            __props__.__dict__["consumer_id"] = None
        super(Consumer, __self__).__init__(
            'konnect:index/consumer:Consumer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            consumer_id: Optional[pulumi.Input[str]] = None,
            custom_id: Optional[pulumi.Input[str]] = None,
            runtime_group_id: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'Consumer':
        """
        Get an existing Consumer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] consumer_id: **(String)** Id of the consumer alone
        :param pulumi.Input[str] custom_id: **(Optional, String)** Field for storing an existing unique ID for the Consumer.
        :param pulumi.Input[str] runtime_group_id: **(Required, String)** The id of the runtime group.
        :param pulumi.Input[str] username: **(Optional, String)** The unique username of the Consumer.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConsumerState.__new__(_ConsumerState)

        __props__.__dict__["consumer_id"] = consumer_id
        __props__.__dict__["custom_id"] = custom_id
        __props__.__dict__["runtime_group_id"] = runtime_group_id
        __props__.__dict__["username"] = username
        return Consumer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="consumerId")
    def consumer_id(self) -> pulumi.Output[str]:
        """
        **(String)** Id of the consumer alone
        """
        return pulumi.get(self, "consumer_id")

    @property
    @pulumi.getter(name="customId")
    def custom_id(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String)** Field for storing an existing unique ID for the Consumer.
        """
        return pulumi.get(self, "custom_id")

    @property
    @pulumi.getter(name="runtimeGroupId")
    def runtime_group_id(self) -> pulumi.Output[str]:
        """
        **(Required, String)** The id of the runtime group.
        """
        return pulumi.get(self, "runtime_group_id")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String)** The unique username of the Consumer.
        """
        return pulumi.get(self, "username")

