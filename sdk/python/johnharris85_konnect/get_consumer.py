# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetConsumerResult',
    'AwaitableGetConsumerResult',
    'get_consumer',
    'get_consumer_output',
]

@pulumi.output_type
class GetConsumerResult:
    """
    A collection of values returned by getConsumer.
    """
    def __init__(__self__, consumer_id=None, custom_id=None, id=None, runtime_group_id=None, search_custom_id=None, search_username=None, username=None):
        if consumer_id and not isinstance(consumer_id, str):
            raise TypeError("Expected argument 'consumer_id' to be a str")
        pulumi.set(__self__, "consumer_id", consumer_id)
        if custom_id and not isinstance(custom_id, str):
            raise TypeError("Expected argument 'custom_id' to be a str")
        pulumi.set(__self__, "custom_id", custom_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if runtime_group_id and not isinstance(runtime_group_id, str):
            raise TypeError("Expected argument 'runtime_group_id' to be a str")
        pulumi.set(__self__, "runtime_group_id", runtime_group_id)
        if search_custom_id and not isinstance(search_custom_id, str):
            raise TypeError("Expected argument 'search_custom_id' to be a str")
        pulumi.set(__self__, "search_custom_id", search_custom_id)
        if search_username and not isinstance(search_username, str):
            raise TypeError("Expected argument 'search_username' to be a str")
        pulumi.set(__self__, "search_username", search_username)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="consumerId")
    def consumer_id(self) -> str:
        """
        **(String)** Id of the consumer alone
        """
        return pulumi.get(self, "consumer_id")

    @property
    @pulumi.getter(name="customId")
    def custom_id(self) -> Optional[str]:
        return pulumi.get(self, "custom_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="runtimeGroupId")
    def runtime_group_id(self) -> str:
        return pulumi.get(self, "runtime_group_id")

    @property
    @pulumi.getter(name="searchCustomId")
    def search_custom_id(self) -> Optional[str]:
        return pulumi.get(self, "search_custom_id")

    @property
    @pulumi.getter(name="searchUsername")
    def search_username(self) -> Optional[str]:
        return pulumi.get(self, "search_username")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


class AwaitableGetConsumerResult(GetConsumerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConsumerResult(
            consumer_id=self.consumer_id,
            custom_id=self.custom_id,
            id=self.id,
            runtime_group_id=self.runtime_group_id,
            search_custom_id=self.search_custom_id,
            search_username=self.search_username,
            username=self.username)


def get_consumer(custom_id: Optional[str] = None,
                 runtime_group_id: Optional[str] = None,
                 search_custom_id: Optional[str] = None,
                 search_username: Optional[str] = None,
                 username: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConsumerResult:
    """
    Represents a consumer
    ## Example Usage

    ```python
    import pulumi
    import pulumi_konnect as konnect

    runtime_group = konnect.get_runtime_group(name="TestRuntimeGroup")
    example = konnect.get_consumer(runtime_group_id=runtime_group.id,
        search_username="Bob")
    ```


    :param str custom_id: **(Optional, String)** The filter string to apply to the custom_id of the consumer. Uses equality.
    :param str runtime_group_id: **(Required, String)** The id of the runtime group containing consumer
    :param str search_custom_id: **(Optional, String)** The search string to apply to the custom_id of the consumer. Uses contains.
    :param str search_username: **(Optional, String)** The search string to apply to the username of the consumer. Uses contains.
    :param str username: **(Optional, String)** The filter string to apply to the username of the consumer. Uses equality.
    """
    __args__ = dict()
    __args__['customId'] = custom_id
    __args__['runtimeGroupId'] = runtime_group_id
    __args__['searchCustomId'] = search_custom_id
    __args__['searchUsername'] = search_username
    __args__['username'] = username
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getConsumer:getConsumer', __args__, opts=opts, typ=GetConsumerResult).value

    return AwaitableGetConsumerResult(
        consumer_id=pulumi.get(__ret__, 'consumer_id'),
        custom_id=pulumi.get(__ret__, 'custom_id'),
        id=pulumi.get(__ret__, 'id'),
        runtime_group_id=pulumi.get(__ret__, 'runtime_group_id'),
        search_custom_id=pulumi.get(__ret__, 'search_custom_id'),
        search_username=pulumi.get(__ret__, 'search_username'),
        username=pulumi.get(__ret__, 'username'))


@_utilities.lift_output_func(get_consumer)
def get_consumer_output(custom_id: Optional[pulumi.Input[Optional[str]]] = None,
                        runtime_group_id: Optional[pulumi.Input[str]] = None,
                        search_custom_id: Optional[pulumi.Input[Optional[str]]] = None,
                        search_username: Optional[pulumi.Input[Optional[str]]] = None,
                        username: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConsumerResult]:
    """
    Represents a consumer
    ## Example Usage

    ```python
    import pulumi
    import pulumi_konnect as konnect

    runtime_group = konnect.get_runtime_group(name="TestRuntimeGroup")
    example = konnect.get_consumer(runtime_group_id=runtime_group.id,
        search_username="Bob")
    ```


    :param str custom_id: **(Optional, String)** The filter string to apply to the custom_id of the consumer. Uses equality.
    :param str runtime_group_id: **(Required, String)** The id of the runtime group containing consumer
    :param str search_custom_id: **(Optional, String)** The search string to apply to the custom_id of the consumer. Uses contains.
    :param str search_username: **(Optional, String)** The search string to apply to the username of the consumer. Uses contains.
    :param str username: **(Optional, String)** The filter string to apply to the username of the consumer. Uses equality.
    """
    ...
