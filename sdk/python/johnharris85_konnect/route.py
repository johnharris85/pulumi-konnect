# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RouteArgs', 'Route']

@pulumi.input_type
class RouteArgs:
    def __init__(__self__, *,
                 runtime_group_id: pulumi.Input[str],
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['RouteHeaderArgs']]]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 https_redirect_status_code: Optional[pulumi.Input[int]] = None,
                 methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path_handling: Optional[pulumi.Input[str]] = None,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preserve_host: Optional[pulumi.Input[bool]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 regex_priority: Optional[pulumi.Input[int]] = None,
                 request_buffering: Optional[pulumi.Input[bool]] = None,
                 response_buffering: Optional[pulumi.Input[bool]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 strip_path: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Route resource.
        :param pulumi.Input[str] runtime_group_id: **(Required, String)** The id of the runtime group.
        :param pulumi.Input[Sequence[pulumi.Input['RouteHeaderArgs']]] headers: **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: **(Optional, List of String)** The hosts this route should allow.
        :param pulumi.Input[int] https_redirect_status_code: **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] methods: **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
        :param pulumi.Input[str] name: **(Optional, String)** The name of the route.
        :param pulumi.Input[str] path_handling: **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] paths: **(Optional, List of String)** The paths this route should allow.
        :param pulumi.Input[bool] preserve_host: **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `hhtps`
        :param pulumi.Input[int] regex_priority: **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
        :param pulumi.Input[bool] request_buffering: **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
        :param pulumi.Input[bool] response_buffering: **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
        :param pulumi.Input[str] service_id: **(Optional, String)** The id of the service to forward traffic to.
        :param pulumi.Input[bool] strip_path: **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
        """
        pulumi.set(__self__, "runtime_group_id", runtime_group_id)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if https_redirect_status_code is not None:
            pulumi.set(__self__, "https_redirect_status_code", https_redirect_status_code)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path_handling is not None:
            pulumi.set(__self__, "path_handling", path_handling)
        if paths is not None:
            pulumi.set(__self__, "paths", paths)
        if preserve_host is not None:
            pulumi.set(__self__, "preserve_host", preserve_host)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if regex_priority is not None:
            pulumi.set(__self__, "regex_priority", regex_priority)
        if request_buffering is not None:
            pulumi.set(__self__, "request_buffering", request_buffering)
        if response_buffering is not None:
            pulumi.set(__self__, "response_buffering", response_buffering)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if strip_path is not None:
            pulumi.set(__self__, "strip_path", strip_path)

    @property
    @pulumi.getter(name="runtimeGroupId")
    def runtime_group_id(self) -> pulumi.Input[str]:
        """
        **(Required, String)** The id of the runtime group.
        """
        return pulumi.get(self, "runtime_group_id")

    @runtime_group_id.setter
    def runtime_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "runtime_group_id", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouteHeaderArgs']]]]:
        """
        **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouteHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        **(Optional, List of String)** The hosts this route should allow.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="httpsRedirectStatusCode")
    def https_redirect_status_code(self) -> Optional[pulumi.Input[int]]:
        """
        **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
        """
        return pulumi.get(self, "https_redirect_status_code")

    @https_redirect_status_code.setter
    def https_redirect_status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_redirect_status_code", value)

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
        """
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** The name of the route.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pathHandling")
    def path_handling(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
        """
        return pulumi.get(self, "path_handling")

    @path_handling.setter
    def path_handling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_handling", value)

    @property
    @pulumi.getter
    def paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        **(Optional, List of String)** The paths this route should allow.
        """
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "paths", value)

    @property
    @pulumi.getter(name="preserveHost")
    def preserve_host(self) -> Optional[pulumi.Input[bool]]:
        """
        **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
        """
        return pulumi.get(self, "preserve_host")

    @preserve_host.setter
    def preserve_host(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_host", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `hhtps`
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="regexPriority")
    def regex_priority(self) -> Optional[pulumi.Input[int]]:
        """
        **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
        """
        return pulumi.get(self, "regex_priority")

    @regex_priority.setter
    def regex_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "regex_priority", value)

    @property
    @pulumi.getter(name="requestBuffering")
    def request_buffering(self) -> Optional[pulumi.Input[bool]]:
        """
        **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
        """
        return pulumi.get(self, "request_buffering")

    @request_buffering.setter
    def request_buffering(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "request_buffering", value)

    @property
    @pulumi.getter(name="responseBuffering")
    def response_buffering(self) -> Optional[pulumi.Input[bool]]:
        """
        **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
        """
        return pulumi.get(self, "response_buffering")

    @response_buffering.setter
    def response_buffering(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "response_buffering", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** The id of the service to forward traffic to.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="stripPath")
    def strip_path(self) -> Optional[pulumi.Input[bool]]:
        """
        **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
        """
        return pulumi.get(self, "strip_path")

    @strip_path.setter
    def strip_path(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strip_path", value)


@pulumi.input_type
class _RouteState:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['RouteHeaderArgs']]]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 https_redirect_status_code: Optional[pulumi.Input[int]] = None,
                 methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path_handling: Optional[pulumi.Input[str]] = None,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preserve_host: Optional[pulumi.Input[bool]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 regex_priority: Optional[pulumi.Input[int]] = None,
                 request_buffering: Optional[pulumi.Input[bool]] = None,
                 response_buffering: Optional[pulumi.Input[bool]] = None,
                 route_id: Optional[pulumi.Input[str]] = None,
                 runtime_group_id: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 strip_path: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Route resources.
        :param pulumi.Input[Sequence[pulumi.Input['RouteHeaderArgs']]] headers: **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: **(Optional, List of String)** The hosts this route should allow.
        :param pulumi.Input[int] https_redirect_status_code: **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] methods: **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
        :param pulumi.Input[str] name: **(Optional, String)** The name of the route.
        :param pulumi.Input[str] path_handling: **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] paths: **(Optional, List of String)** The paths this route should allow.
        :param pulumi.Input[bool] preserve_host: **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `hhtps`
        :param pulumi.Input[int] regex_priority: **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
        :param pulumi.Input[bool] request_buffering: **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
        :param pulumi.Input[bool] response_buffering: **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
        :param pulumi.Input[str] route_id: **(String)** Id of the route alone
        :param pulumi.Input[str] runtime_group_id: **(Required, String)** The id of the runtime group.
        :param pulumi.Input[str] service_id: **(Optional, String)** The id of the service to forward traffic to.
        :param pulumi.Input[bool] strip_path: **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
        """
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if https_redirect_status_code is not None:
            pulumi.set(__self__, "https_redirect_status_code", https_redirect_status_code)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path_handling is not None:
            pulumi.set(__self__, "path_handling", path_handling)
        if paths is not None:
            pulumi.set(__self__, "paths", paths)
        if preserve_host is not None:
            pulumi.set(__self__, "preserve_host", preserve_host)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if regex_priority is not None:
            pulumi.set(__self__, "regex_priority", regex_priority)
        if request_buffering is not None:
            pulumi.set(__self__, "request_buffering", request_buffering)
        if response_buffering is not None:
            pulumi.set(__self__, "response_buffering", response_buffering)
        if route_id is not None:
            pulumi.set(__self__, "route_id", route_id)
        if runtime_group_id is not None:
            pulumi.set(__self__, "runtime_group_id", runtime_group_id)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if strip_path is not None:
            pulumi.set(__self__, "strip_path", strip_path)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouteHeaderArgs']]]]:
        """
        **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouteHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        **(Optional, List of String)** The hosts this route should allow.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="httpsRedirectStatusCode")
    def https_redirect_status_code(self) -> Optional[pulumi.Input[int]]:
        """
        **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
        """
        return pulumi.get(self, "https_redirect_status_code")

    @https_redirect_status_code.setter
    def https_redirect_status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_redirect_status_code", value)

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
        """
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** The name of the route.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pathHandling")
    def path_handling(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
        """
        return pulumi.get(self, "path_handling")

    @path_handling.setter
    def path_handling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_handling", value)

    @property
    @pulumi.getter
    def paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        **(Optional, List of String)** The paths this route should allow.
        """
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "paths", value)

    @property
    @pulumi.getter(name="preserveHost")
    def preserve_host(self) -> Optional[pulumi.Input[bool]]:
        """
        **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
        """
        return pulumi.get(self, "preserve_host")

    @preserve_host.setter
    def preserve_host(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_host", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `hhtps`
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="regexPriority")
    def regex_priority(self) -> Optional[pulumi.Input[int]]:
        """
        **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
        """
        return pulumi.get(self, "regex_priority")

    @regex_priority.setter
    def regex_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "regex_priority", value)

    @property
    @pulumi.getter(name="requestBuffering")
    def request_buffering(self) -> Optional[pulumi.Input[bool]]:
        """
        **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
        """
        return pulumi.get(self, "request_buffering")

    @request_buffering.setter
    def request_buffering(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "request_buffering", value)

    @property
    @pulumi.getter(name="responseBuffering")
    def response_buffering(self) -> Optional[pulumi.Input[bool]]:
        """
        **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
        """
        return pulumi.get(self, "response_buffering")

    @response_buffering.setter
    def response_buffering(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "response_buffering", value)

    @property
    @pulumi.getter(name="routeId")
    def route_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(String)** Id of the route alone
        """
        return pulumi.get(self, "route_id")

    @route_id.setter
    def route_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_id", value)

    @property
    @pulumi.getter(name="runtimeGroupId")
    def runtime_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Required, String)** The id of the runtime group.
        """
        return pulumi.get(self, "runtime_group_id")

    @runtime_group_id.setter
    def runtime_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_group_id", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** The id of the service to forward traffic to.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="stripPath")
    def strip_path(self) -> Optional[pulumi.Input[bool]]:
        """
        **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
        """
        return pulumi.get(self, "strip_path")

    @strip_path.setter
    def strip_path(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strip_path", value)


class Route(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteHeaderArgs']]]]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 https_redirect_status_code: Optional[pulumi.Input[int]] = None,
                 methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path_handling: Optional[pulumi.Input[str]] = None,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preserve_host: Optional[pulumi.Input[bool]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 regex_priority: Optional[pulumi.Input[int]] = None,
                 request_buffering: Optional[pulumi.Input[bool]] = None,
                 response_buffering: Optional[pulumi.Input[bool]] = None,
                 runtime_group_id: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 strip_path: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Represents a route within a runtime group
        ## Example Usage

        ```python
        import pulumi
        import johnharris85_konnect as konnect
        import pulumi_konnect as konnect

        runtime_group = konnect.get_runtime_group(name="TestRuntimeGroup")
        service = konnect.Service("service",
            runtime_group_id=runtime_group.id,
            host="mockbin.org")
        example = konnect.Route("example",
            runtime_group_id=runtime_group.id,
            service_id=service.service_id,
            protocols=["http"],
            paths=["/example"],
            headers=[konnect.RouteHeaderArgs(
                name="required-header",
                values=["required-header-values"],
            )])
        ```

        ## Import

        Routes can be imported using a proper value of `id` as described above

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteHeaderArgs']]]] headers: **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: **(Optional, List of String)** The hosts this route should allow.
        :param pulumi.Input[int] https_redirect_status_code: **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] methods: **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
        :param pulumi.Input[str] name: **(Optional, String)** The name of the route.
        :param pulumi.Input[str] path_handling: **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] paths: **(Optional, List of String)** The paths this route should allow.
        :param pulumi.Input[bool] preserve_host: **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `hhtps`
        :param pulumi.Input[int] regex_priority: **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
        :param pulumi.Input[bool] request_buffering: **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
        :param pulumi.Input[bool] response_buffering: **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
        :param pulumi.Input[str] runtime_group_id: **(Required, String)** The id of the runtime group.
        :param pulumi.Input[str] service_id: **(Optional, String)** The id of the service to forward traffic to.
        :param pulumi.Input[bool] strip_path: **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Represents a route within a runtime group
        ## Example Usage

        ```python
        import pulumi
        import johnharris85_konnect as konnect
        import pulumi_konnect as konnect

        runtime_group = konnect.get_runtime_group(name="TestRuntimeGroup")
        service = konnect.Service("service",
            runtime_group_id=runtime_group.id,
            host="mockbin.org")
        example = konnect.Route("example",
            runtime_group_id=runtime_group.id,
            service_id=service.service_id,
            protocols=["http"],
            paths=["/example"],
            headers=[konnect.RouteHeaderArgs(
                name="required-header",
                values=["required-header-values"],
            )])
        ```

        ## Import

        Routes can be imported using a proper value of `id` as described above

        :param str resource_name: The name of the resource.
        :param RouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteHeaderArgs']]]]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 https_redirect_status_code: Optional[pulumi.Input[int]] = None,
                 methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path_handling: Optional[pulumi.Input[str]] = None,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preserve_host: Optional[pulumi.Input[bool]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 regex_priority: Optional[pulumi.Input[int]] = None,
                 request_buffering: Optional[pulumi.Input[bool]] = None,
                 response_buffering: Optional[pulumi.Input[bool]] = None,
                 runtime_group_id: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 strip_path: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouteArgs.__new__(RouteArgs)

            __props__.__dict__["headers"] = headers
            __props__.__dict__["hosts"] = hosts
            __props__.__dict__["https_redirect_status_code"] = https_redirect_status_code
            __props__.__dict__["methods"] = methods
            __props__.__dict__["name"] = name
            __props__.__dict__["path_handling"] = path_handling
            __props__.__dict__["paths"] = paths
            __props__.__dict__["preserve_host"] = preserve_host
            __props__.__dict__["protocols"] = protocols
            __props__.__dict__["regex_priority"] = regex_priority
            __props__.__dict__["request_buffering"] = request_buffering
            __props__.__dict__["response_buffering"] = response_buffering
            if runtime_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'runtime_group_id'")
            __props__.__dict__["runtime_group_id"] = runtime_group_id
            __props__.__dict__["service_id"] = service_id
            __props__.__dict__["strip_path"] = strip_path
            __props__.__dict__["route_id"] = None
        super(Route, __self__).__init__(
            'konnect:index/route:Route',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteHeaderArgs']]]]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            https_redirect_status_code: Optional[pulumi.Input[int]] = None,
            methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            path_handling: Optional[pulumi.Input[str]] = None,
            paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            preserve_host: Optional[pulumi.Input[bool]] = None,
            protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            regex_priority: Optional[pulumi.Input[int]] = None,
            request_buffering: Optional[pulumi.Input[bool]] = None,
            response_buffering: Optional[pulumi.Input[bool]] = None,
            route_id: Optional[pulumi.Input[str]] = None,
            runtime_group_id: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None,
            strip_path: Optional[pulumi.Input[bool]] = None) -> 'Route':
        """
        Get an existing Route resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteHeaderArgs']]]] headers: **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: **(Optional, List of String)** The hosts this route should allow.
        :param pulumi.Input[int] https_redirect_status_code: **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] methods: **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
        :param pulumi.Input[str] name: **(Optional, String)** The name of the route.
        :param pulumi.Input[str] path_handling: **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] paths: **(Optional, List of String)** The paths this route should allow.
        :param pulumi.Input[bool] preserve_host: **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `hhtps`
        :param pulumi.Input[int] regex_priority: **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
        :param pulumi.Input[bool] request_buffering: **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
        :param pulumi.Input[bool] response_buffering: **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
        :param pulumi.Input[str] route_id: **(String)** Id of the route alone
        :param pulumi.Input[str] runtime_group_id: **(Required, String)** The id of the runtime group.
        :param pulumi.Input[str] service_id: **(Optional, String)** The id of the service to forward traffic to.
        :param pulumi.Input[bool] strip_path: **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouteState.__new__(_RouteState)

        __props__.__dict__["headers"] = headers
        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["https_redirect_status_code"] = https_redirect_status_code
        __props__.__dict__["methods"] = methods
        __props__.__dict__["name"] = name
        __props__.__dict__["path_handling"] = path_handling
        __props__.__dict__["paths"] = paths
        __props__.__dict__["preserve_host"] = preserve_host
        __props__.__dict__["protocols"] = protocols
        __props__.__dict__["regex_priority"] = regex_priority
        __props__.__dict__["request_buffering"] = request_buffering
        __props__.__dict__["response_buffering"] = response_buffering
        __props__.__dict__["route_id"] = route_id
        __props__.__dict__["runtime_group_id"] = runtime_group_id
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["strip_path"] = strip_path
        return Route(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def headers(self) -> pulumi.Output[Optional[Sequence['outputs.RouteHeader']]]:
        """
        **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        **(Optional, List of String)** The hosts this route should allow.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="httpsRedirectStatusCode")
    def https_redirect_status_code(self) -> pulumi.Output[Optional[int]]:
        """
        **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
        """
        return pulumi.get(self, "https_redirect_status_code")

    @property
    @pulumi.getter
    def methods(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
        """
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        **(Optional, String)** The name of the route.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pathHandling")
    def path_handling(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
        """
        return pulumi.get(self, "path_handling")

    @property
    @pulumi.getter
    def paths(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        **(Optional, List of String)** The paths this route should allow.
        """
        return pulumi.get(self, "paths")

    @property
    @pulumi.getter(name="preserveHost")
    def preserve_host(self) -> pulumi.Output[Optional[bool]]:
        """
        **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
        """
        return pulumi.get(self, "preserve_host")

    @property
    @pulumi.getter
    def protocols(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `hhtps`
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="regexPriority")
    def regex_priority(self) -> pulumi.Output[Optional[int]]:
        """
        **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
        """
        return pulumi.get(self, "regex_priority")

    @property
    @pulumi.getter(name="requestBuffering")
    def request_buffering(self) -> pulumi.Output[Optional[bool]]:
        """
        **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
        """
        return pulumi.get(self, "request_buffering")

    @property
    @pulumi.getter(name="responseBuffering")
    def response_buffering(self) -> pulumi.Output[Optional[bool]]:
        """
        **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
        """
        return pulumi.get(self, "response_buffering")

    @property
    @pulumi.getter(name="routeId")
    def route_id(self) -> pulumi.Output[str]:
        """
        **(String)** Id of the route alone
        """
        return pulumi.get(self, "route_id")

    @property
    @pulumi.getter(name="runtimeGroupId")
    def runtime_group_id(self) -> pulumi.Output[str]:
        """
        **(Required, String)** The id of the runtime group.
        """
        return pulumi.get(self, "runtime_group_id")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String)** The id of the service to forward traffic to.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="stripPath")
    def strip_path(self) -> pulumi.Output[Optional[bool]]:
        """
        **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
        """
        return pulumi.get(self, "strip_path")

