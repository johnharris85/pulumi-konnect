# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PluginArgs', 'Plugin']

@pulumi.input_type
class PluginArgs:
    def __init__(__self__, *,
                 runtime_group_id: pulumi.Input[str],
                 config_json: Optional[pulumi.Input[str]] = None,
                 consumer_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 route_id: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Plugin resource.
        :param pulumi.Input[str] runtime_group_id: **(Required, String)** The id of the runtime group.
        :param pulumi.Input[str] config_json: **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
        :param pulumi.Input[str] consumer_id: **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
        :param pulumi.Input[bool] enabled: **(Optional, Boolean)** Whether the plugin is active. Default: `true`
        :param pulumi.Input[str] instance_name: **(Optional, String)** The instance name of the plugin. Default: `-`
        :param pulumi.Input[str] name: **(Required, String)** The name of the plugin which must match a valid installed plugin.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tls_passthrough`, `udp`, `ws`, `wss`
        :param pulumi.Input[str] route_id: **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
        :param pulumi.Input[str] service_id: **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
        """
        pulumi.set(__self__, "runtime_group_id", runtime_group_id)
        if config_json is not None:
            pulumi.set(__self__, "config_json", config_json)
        if consumer_id is not None:
            pulumi.set(__self__, "consumer_id", consumer_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if route_id is not None:
            pulumi.set(__self__, "route_id", route_id)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="runtimeGroupId")
    def runtime_group_id(self) -> pulumi.Input[str]:
        """
        **(Required, String)** The id of the runtime group.
        """
        return pulumi.get(self, "runtime_group_id")

    @runtime_group_id.setter
    def runtime_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "runtime_group_id", value)

    @property
    @pulumi.getter(name="configJson")
    def config_json(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
        """
        return pulumi.get(self, "config_json")

    @config_json.setter
    def config_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_json", value)

    @property
    @pulumi.getter(name="consumerId")
    def consumer_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
        """
        return pulumi.get(self, "consumer_id")

    @consumer_id.setter
    def consumer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        **(Optional, Boolean)** Whether the plugin is active. Default: `true`
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** The instance name of the plugin. Default: `-`
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        **(Required, String)** The name of the plugin which must match a valid installed plugin.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tls_passthrough`, `udp`, `ws`, `wss`
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="routeId")
    def route_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
        """
        return pulumi.get(self, "route_id")

    @route_id.setter
    def route_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_id", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)


@pulumi.input_type
class _PluginState:
    def __init__(__self__, *,
                 config_all_json: Optional[pulumi.Input[str]] = None,
                 config_json: Optional[pulumi.Input[str]] = None,
                 consumer_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plugin_id: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 route_id: Optional[pulumi.Input[str]] = None,
                 runtime_group_id: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Plugin resources.
        :param pulumi.Input[str] config_all_json: **(JSON)** The full configuration properties for the plugin, including all properties with their default values not specified in `config`.
        :param pulumi.Input[str] config_json: **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
        :param pulumi.Input[str] consumer_id: **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
        :param pulumi.Input[bool] enabled: **(Optional, Boolean)** Whether the plugin is active. Default: `true`
        :param pulumi.Input[str] instance_name: **(Optional, String)** The instance name of the plugin. Default: `-`
        :param pulumi.Input[str] name: **(Required, String)** The name of the plugin which must match a valid installed plugin.
        :param pulumi.Input[str] plugin_id: **(String)** Id of the plugin alone
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tls_passthrough`, `udp`, `ws`, `wss`
        :param pulumi.Input[str] route_id: **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
        :param pulumi.Input[str] runtime_group_id: **(Required, String)** The id of the runtime group.
        :param pulumi.Input[str] service_id: **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
        """
        if config_all_json is not None:
            pulumi.set(__self__, "config_all_json", config_all_json)
        if config_json is not None:
            pulumi.set(__self__, "config_json", config_json)
        if consumer_id is not None:
            pulumi.set(__self__, "consumer_id", consumer_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plugin_id is not None:
            pulumi.set(__self__, "plugin_id", plugin_id)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if route_id is not None:
            pulumi.set(__self__, "route_id", route_id)
        if runtime_group_id is not None:
            pulumi.set(__self__, "runtime_group_id", runtime_group_id)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="configAllJson")
    def config_all_json(self) -> Optional[pulumi.Input[str]]:
        """
        **(JSON)** The full configuration properties for the plugin, including all properties with their default values not specified in `config`.
        """
        return pulumi.get(self, "config_all_json")

    @config_all_json.setter
    def config_all_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_all_json", value)

    @property
    @pulumi.getter(name="configJson")
    def config_json(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
        """
        return pulumi.get(self, "config_json")

    @config_json.setter
    def config_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_json", value)

    @property
    @pulumi.getter(name="consumerId")
    def consumer_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
        """
        return pulumi.get(self, "consumer_id")

    @consumer_id.setter
    def consumer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        **(Optional, Boolean)** Whether the plugin is active. Default: `true`
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** The instance name of the plugin. Default: `-`
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        **(Required, String)** The name of the plugin which must match a valid installed plugin.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(String)** Id of the plugin alone
        """
        return pulumi.get(self, "plugin_id")

    @plugin_id.setter
    def plugin_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_id", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tls_passthrough`, `udp`, `ws`, `wss`
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="routeId")
    def route_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
        """
        return pulumi.get(self, "route_id")

    @route_id.setter
    def route_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_id", value)

    @property
    @pulumi.getter(name="runtimeGroupId")
    def runtime_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Required, String)** The id of the runtime group.
        """
        return pulumi.get(self, "runtime_group_id")

    @runtime_group_id.setter
    def runtime_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_group_id", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)


class Plugin(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_json: Optional[pulumi.Input[str]] = None,
                 consumer_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 route_id: Optional[pulumi.Input[str]] = None,
                 runtime_group_id: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Represents a plugin within a runtime group
        ## Example Usage

        ```python
        import pulumi
        import johnharris85_konnect as konnect
        import pulumi_konnect as konnect

        runtime_group = konnect.get_runtime_group(name="TestRuntimeGroup")
        example = konnect.Plugin("example",
            runtime_group_id=runtime_group.id,
            config_json=\"\"\"{
          "minute": 5
        }
        \"\"\")
        ```

        ## Import

        Plugins can be imported using a proper value of `id` as described above

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_json: **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
        :param pulumi.Input[str] consumer_id: **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
        :param pulumi.Input[bool] enabled: **(Optional, Boolean)** Whether the plugin is active. Default: `true`
        :param pulumi.Input[str] instance_name: **(Optional, String)** The instance name of the plugin. Default: `-`
        :param pulumi.Input[str] name: **(Required, String)** The name of the plugin which must match a valid installed plugin.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tls_passthrough`, `udp`, `ws`, `wss`
        :param pulumi.Input[str] route_id: **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
        :param pulumi.Input[str] runtime_group_id: **(Required, String)** The id of the runtime group.
        :param pulumi.Input[str] service_id: **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PluginArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Represents a plugin within a runtime group
        ## Example Usage

        ```python
        import pulumi
        import johnharris85_konnect as konnect
        import pulumi_konnect as konnect

        runtime_group = konnect.get_runtime_group(name="TestRuntimeGroup")
        example = konnect.Plugin("example",
            runtime_group_id=runtime_group.id,
            config_json=\"\"\"{
          "minute": 5
        }
        \"\"\")
        ```

        ## Import

        Plugins can be imported using a proper value of `id` as described above

        :param str resource_name: The name of the resource.
        :param PluginArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PluginArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_json: Optional[pulumi.Input[str]] = None,
                 consumer_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 route_id: Optional[pulumi.Input[str]] = None,
                 runtime_group_id: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PluginArgs.__new__(PluginArgs)

            __props__.__dict__["config_json"] = config_json
            __props__.__dict__["consumer_id"] = consumer_id
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["name"] = name
            __props__.__dict__["protocols"] = protocols
            __props__.__dict__["route_id"] = route_id
            if runtime_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'runtime_group_id'")
            __props__.__dict__["runtime_group_id"] = runtime_group_id
            __props__.__dict__["service_id"] = service_id
            __props__.__dict__["config_all_json"] = None
            __props__.__dict__["plugin_id"] = None
        super(Plugin, __self__).__init__(
            'konnect:index/plugin:Plugin',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_all_json: Optional[pulumi.Input[str]] = None,
            config_json: Optional[pulumi.Input[str]] = None,
            consumer_id: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            plugin_id: Optional[pulumi.Input[str]] = None,
            protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            route_id: Optional[pulumi.Input[str]] = None,
            runtime_group_id: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None) -> 'Plugin':
        """
        Get an existing Plugin resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_all_json: **(JSON)** The full configuration properties for the plugin, including all properties with their default values not specified in `config`.
        :param pulumi.Input[str] config_json: **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
        :param pulumi.Input[str] consumer_id: **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
        :param pulumi.Input[bool] enabled: **(Optional, Boolean)** Whether the plugin is active. Default: `true`
        :param pulumi.Input[str] instance_name: **(Optional, String)** The instance name of the plugin. Default: `-`
        :param pulumi.Input[str] name: **(Required, String)** The name of the plugin which must match a valid installed plugin.
        :param pulumi.Input[str] plugin_id: **(String)** Id of the plugin alone
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tls_passthrough`, `udp`, `ws`, `wss`
        :param pulumi.Input[str] route_id: **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
        :param pulumi.Input[str] runtime_group_id: **(Required, String)** The id of the runtime group.
        :param pulumi.Input[str] service_id: **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PluginState.__new__(_PluginState)

        __props__.__dict__["config_all_json"] = config_all_json
        __props__.__dict__["config_json"] = config_json
        __props__.__dict__["consumer_id"] = consumer_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["name"] = name
        __props__.__dict__["plugin_id"] = plugin_id
        __props__.__dict__["protocols"] = protocols
        __props__.__dict__["route_id"] = route_id
        __props__.__dict__["runtime_group_id"] = runtime_group_id
        __props__.__dict__["service_id"] = service_id
        return Plugin(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configAllJson")
    def config_all_json(self) -> pulumi.Output[str]:
        """
        **(JSON)** The full configuration properties for the plugin, including all properties with their default values not specified in `config`.
        """
        return pulumi.get(self, "config_all_json")

    @property
    @pulumi.getter(name="configJson")
    def config_json(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
        """
        return pulumi.get(self, "config_json")

    @property
    @pulumi.getter(name="consumerId")
    def consumer_id(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
        """
        return pulumi.get(self, "consumer_id")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        **(Optional, Boolean)** Whether the plugin is active. Default: `true`
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String)** The instance name of the plugin. Default: `-`
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        **(Required, String)** The name of the plugin which must match a valid installed plugin.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> pulumi.Output[str]:
        """
        **(String)** Id of the plugin alone
        """
        return pulumi.get(self, "plugin_id")

    @property
    @pulumi.getter
    def protocols(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tls_passthrough`, `udp`, `ws`, `wss`
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="routeId")
    def route_id(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
        """
        return pulumi.get(self, "route_id")

    @property
    @pulumi.getter(name="runtimeGroupId")
    def runtime_group_id(self) -> pulumi.Output[str]:
        """
        **(Required, String)** The id of the runtime group.
        """
        return pulumi.get(self, "runtime_group_id")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[Optional[str]]:
        """
        **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
        """
        return pulumi.get(self, "service_id")

