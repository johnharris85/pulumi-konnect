# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetRoleResult',
    'AwaitableGetRoleResult',
    'get_role',
    'get_role_output',
]

@pulumi.output_type
class GetRoleResult:
    """
    A collection of values returned by getRole.
    """
    def __init__(__self__, description=None, display_name=None, entity_type_display_name=None, entity_type_name=None, id=None, name=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if entity_type_display_name and not isinstance(entity_type_display_name, str):
            raise TypeError("Expected argument 'entity_type_display_name' to be a str")
        pulumi.set(__self__, "entity_type_display_name", entity_type_display_name)
        if entity_type_name and not isinstance(entity_type_name, str):
            raise TypeError("Expected argument 'entity_type_name' to be a str")
        pulumi.set(__self__, "entity_type_name", entity_type_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        **(String)** The description of the role.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityTypeDisplayName")
    def entity_type_display_name(self) -> str:
        return pulumi.get(self, "entity_type_display_name")

    @property
    @pulumi.getter(name="entityTypeName")
    def entity_type_name(self) -> str:
        """
        **(String)** The name of the role entity type.
        """
        return pulumi.get(self, "entity_type_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        **(String)** The name of the role.
        """
        return pulumi.get(self, "name")


class AwaitableGetRoleResult(GetRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRoleResult(
            description=self.description,
            display_name=self.display_name,
            entity_type_display_name=self.entity_type_display_name,
            entity_type_name=self.entity_type_name,
            id=self.id,
            name=self.name)


def get_role(display_name: Optional[str] = None,
             entity_type_display_name: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRoleResult:
    """
    Represents a role
    ## Example Usage

    ```python
    import pulumi
    import pulumi_konnect as konnect

    example = konnect.get_role(display_name="Admin",
        entity_type_display_name="Runtime Groups")
    ```


    :param str display_name: **(Required, String)** The display name of the Role. Uses equality.
    :param str entity_type_display_name: **(Required, String)** The display name of the role entity type. Must be `Runtime Groups` or `Services`
    """
    __args__ = dict()
    __args__['displayName'] = display_name
    __args__['entityTypeDisplayName'] = entity_type_display_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getRole:getRole', __args__, opts=opts, typ=GetRoleResult).value

    return AwaitableGetRoleResult(
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        entity_type_display_name=pulumi.get(__ret__, 'entity_type_display_name'),
        entity_type_name=pulumi.get(__ret__, 'entity_type_name'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_role)
def get_role_output(display_name: Optional[pulumi.Input[str]] = None,
                    entity_type_display_name: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRoleResult]:
    """
    Represents a role
    ## Example Usage

    ```python
    import pulumi
    import pulumi_konnect as konnect

    example = konnect.get_role(display_name="Admin",
        entity_type_display_name="Runtime Groups")
    ```


    :param str display_name: **(Required, String)** The display name of the Role. Uses equality.
    :param str entity_type_display_name: **(Required, String)** The display name of the role entity type. Must be `Runtime Groups` or `Services`
    """
    ...
