# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'RouteHeader',
    'TeamMappingsMapping',
    'GetNodesNodeResult',
]

@pulumi.output_type
class RouteHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: **(Required, String)** Name of header this route should require.
        :param Sequence[str] values: **(Required, List of String)** Allowed values this header should equal.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        **(Required, String)** Name of header this route should require.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        **(Required, List of String)** Allowed values this header should equal.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class TeamMappingsMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "teamIds":
            suggest = "team_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TeamMappingsMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TeamMappingsMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TeamMappingsMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: str,
                 team_ids: Sequence[str]):
        """
        :param str group: **(Required, String)** Identifier of an IdP group that is contained with OIDC ID token for groups claim
        :param Sequence[str] team_ids: **(Required, List of String)** Konnect teams that should map to this group.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "team_ids", team_ids)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        **(Required, String)** Identifier of an IdP group that is contained with OIDC ID token for groups claim
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="teamIds")
    def team_ids(self) -> Sequence[str]:
        """
        **(Required, List of String)** Konnect teams that should map to this group.
        """
        return pulumi.get(self, "team_ids")


@pulumi.output_type
class GetNodesNodeResult(dict):
    def __init__(__self__, *,
                 config_hash: str,
                 data_plane_cert_id: str,
                 hostname: str,
                 id: str,
                 last_ping: int,
                 type: str,
                 version: str):
        """
        :param str config_hash: **(String)** Hash of the current configuration state of node.
        :param str data_plane_cert_id: **(String)** Id of certificate used in communication between node and runtime group.
        :param str hostname: **(String)** Hostname of node.
        :param str id: **(String)** Id of node.
        :param int last_ping: **(Integer)** Last time of ping of node.
        :param str type: **(String)** Type of node.
        :param str version: **(String)** Version of node.
        """
        pulumi.set(__self__, "config_hash", config_hash)
        pulumi.set(__self__, "data_plane_cert_id", data_plane_cert_id)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_ping", last_ping)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="configHash")
    def config_hash(self) -> str:
        """
        **(String)** Hash of the current configuration state of node.
        """
        return pulumi.get(self, "config_hash")

    @property
    @pulumi.getter(name="dataPlaneCertId")
    def data_plane_cert_id(self) -> str:
        """
        **(String)** Id of certificate used in communication between node and runtime group.
        """
        return pulumi.get(self, "data_plane_cert_id")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        **(String)** Hostname of node.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        **(String)** Id of node.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastPing")
    def last_ping(self) -> int:
        """
        **(Integer)** Last time of ping of node.
        """
        return pulumi.get(self, "last_ping")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        **(String)** Type of node.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        **(String)** Version of node.
        """
        return pulumi.get(self, "version")


