// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents a runtime group
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := konnect.LookupRuntimeGroup(ctx, &konnect.LookupRuntimeGroupArgs{
//				Name: pulumi.StringRef("TestRuntimeGroup"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRuntimeGroup(ctx *pulumi.Context, args *LookupRuntimeGroupArgs, opts ...pulumi.InvokeOption) (*LookupRuntimeGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRuntimeGroupResult
	err := ctx.Invoke("konnect:index/getRuntimeGroup:getRuntimeGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRuntimeGroup.
type LookupRuntimeGroupArgs struct {
	// **(Optional, String)** The filter string to apply to the name of the runtime group. Uses equality.
	Name *string `pulumi:"name"`
	// **(Optional, String)** The search string to apply to the name of the runtime group. Uses contains.
	SearchName *string `pulumi:"searchName"`
}

// A collection of values returned by getRuntimeGroup.
type LookupRuntimeGroupResult struct {
	// **(String)** The cluster type of the runtime group.
	ClusterType string `pulumi:"clusterType"`
	// **(String)** The control plane endpoint URL of the runtime group.
	ControlPlaneEndpoint string `pulumi:"controlPlaneEndpoint"`
	// **(String)** The description of the runtime group.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	Name       *string `pulumi:"name"`
	SearchName *string `pulumi:"searchName"`
	// **(String)** The telemetry endpoint URL of the runtime group.
	TelemetryEndpoint string `pulumi:"telemetryEndpoint"`
}

func LookupRuntimeGroupOutput(ctx *pulumi.Context, args LookupRuntimeGroupOutputArgs, opts ...pulumi.InvokeOption) LookupRuntimeGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRuntimeGroupResult, error) {
			args := v.(LookupRuntimeGroupArgs)
			r, err := LookupRuntimeGroup(ctx, &args, opts...)
			var s LookupRuntimeGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRuntimeGroupResultOutput)
}

// A collection of arguments for invoking getRuntimeGroup.
type LookupRuntimeGroupOutputArgs struct {
	// **(Optional, String)** The filter string to apply to the name of the runtime group. Uses equality.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// **(Optional, String)** The search string to apply to the name of the runtime group. Uses contains.
	SearchName pulumi.StringPtrInput `pulumi:"searchName"`
}

func (LookupRuntimeGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRuntimeGroupArgs)(nil)).Elem()
}

// A collection of values returned by getRuntimeGroup.
type LookupRuntimeGroupResultOutput struct{ *pulumi.OutputState }

func (LookupRuntimeGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRuntimeGroupResult)(nil)).Elem()
}

func (o LookupRuntimeGroupResultOutput) ToLookupRuntimeGroupResultOutput() LookupRuntimeGroupResultOutput {
	return o
}

func (o LookupRuntimeGroupResultOutput) ToLookupRuntimeGroupResultOutputWithContext(ctx context.Context) LookupRuntimeGroupResultOutput {
	return o
}

func (o LookupRuntimeGroupResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupRuntimeGroupResult] {
	return pulumix.Output[LookupRuntimeGroupResult]{
		OutputState: o.OutputState,
	}
}

// **(String)** The cluster type of the runtime group.
func (o LookupRuntimeGroupResultOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRuntimeGroupResult) string { return v.ClusterType }).(pulumi.StringOutput)
}

// **(String)** The control plane endpoint URL of the runtime group.
func (o LookupRuntimeGroupResultOutput) ControlPlaneEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRuntimeGroupResult) string { return v.ControlPlaneEndpoint }).(pulumi.StringOutput)
}

// **(String)** The description of the runtime group.
func (o LookupRuntimeGroupResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRuntimeGroupResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRuntimeGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRuntimeGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRuntimeGroupResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuntimeGroupResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupRuntimeGroupResultOutput) SearchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuntimeGroupResult) *string { return v.SearchName }).(pulumi.StringPtrOutput)
}

// **(String)** The telemetry endpoint URL of the runtime group.
func (o LookupRuntimeGroupResultOutput) TelemetryEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRuntimeGroupResult) string { return v.TelemetryEndpoint }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRuntimeGroupResultOutput{})
}
