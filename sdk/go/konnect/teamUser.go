// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents a member of a team
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			team, err := konnect.NewTeam(ctx, "team", &konnect.TeamArgs{
//				Description: pulumi.String("testing"),
//			})
//			if err != nil {
//				return err
//			}
//			user, err := konnect.LookupUser(ctx, &konnect.LookupUserArgs{
//				SearchFullName: pulumi.StringRef("Joe"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = konnect.NewTeamUser(ctx, "example", &konnect.TeamUserArgs{
//				TeamId: team.ID(),
//				UserId: *pulumi.String(user.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Team users can be imported using a proper value of `id` as described above
type TeamUser struct {
	pulumi.CustomResourceState

	// **(Required, ForceNew, String)** The id of the team.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// **(Required, ForceNew, String)** The id of the user.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewTeamUser registers a new resource with the given unique name, arguments, and options.
func NewTeamUser(ctx *pulumi.Context,
	name string, args *TeamUserArgs, opts ...pulumi.ResourceOption) (*TeamUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamUser
	err := ctx.RegisterResource("konnect:index/teamUser:TeamUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamUser gets an existing TeamUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamUserState, opts ...pulumi.ResourceOption) (*TeamUser, error) {
	var resource TeamUser
	err := ctx.ReadResource("konnect:index/teamUser:TeamUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamUser resources.
type teamUserState struct {
	// **(Required, ForceNew, String)** The id of the team.
	TeamId *string `pulumi:"teamId"`
	// **(Required, ForceNew, String)** The id of the user.
	UserId *string `pulumi:"userId"`
}

type TeamUserState struct {
	// **(Required, ForceNew, String)** The id of the team.
	TeamId pulumi.StringPtrInput
	// **(Required, ForceNew, String)** The id of the user.
	UserId pulumi.StringPtrInput
}

func (TeamUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamUserState)(nil)).Elem()
}

type teamUserArgs struct {
	// **(Required, ForceNew, String)** The id of the team.
	TeamId string `pulumi:"teamId"`
	// **(Required, ForceNew, String)** The id of the user.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a TeamUser resource.
type TeamUserArgs struct {
	// **(Required, ForceNew, String)** The id of the team.
	TeamId pulumi.StringInput
	// **(Required, ForceNew, String)** The id of the user.
	UserId pulumi.StringInput
}

func (TeamUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamUserArgs)(nil)).Elem()
}

type TeamUserInput interface {
	pulumi.Input

	ToTeamUserOutput() TeamUserOutput
	ToTeamUserOutputWithContext(ctx context.Context) TeamUserOutput
}

func (*TeamUser) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamUser)(nil)).Elem()
}

func (i *TeamUser) ToTeamUserOutput() TeamUserOutput {
	return i.ToTeamUserOutputWithContext(context.Background())
}

func (i *TeamUser) ToTeamUserOutputWithContext(ctx context.Context) TeamUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamUserOutput)
}

func (i *TeamUser) ToOutput(ctx context.Context) pulumix.Output[*TeamUser] {
	return pulumix.Output[*TeamUser]{
		OutputState: i.ToTeamUserOutputWithContext(ctx).OutputState,
	}
}

// TeamUserArrayInput is an input type that accepts TeamUserArray and TeamUserArrayOutput values.
// You can construct a concrete instance of `TeamUserArrayInput` via:
//
//	TeamUserArray{ TeamUserArgs{...} }
type TeamUserArrayInput interface {
	pulumi.Input

	ToTeamUserArrayOutput() TeamUserArrayOutput
	ToTeamUserArrayOutputWithContext(context.Context) TeamUserArrayOutput
}

type TeamUserArray []TeamUserInput

func (TeamUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamUser)(nil)).Elem()
}

func (i TeamUserArray) ToTeamUserArrayOutput() TeamUserArrayOutput {
	return i.ToTeamUserArrayOutputWithContext(context.Background())
}

func (i TeamUserArray) ToTeamUserArrayOutputWithContext(ctx context.Context) TeamUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamUserArrayOutput)
}

func (i TeamUserArray) ToOutput(ctx context.Context) pulumix.Output[[]*TeamUser] {
	return pulumix.Output[[]*TeamUser]{
		OutputState: i.ToTeamUserArrayOutputWithContext(ctx).OutputState,
	}
}

// TeamUserMapInput is an input type that accepts TeamUserMap and TeamUserMapOutput values.
// You can construct a concrete instance of `TeamUserMapInput` via:
//
//	TeamUserMap{ "key": TeamUserArgs{...} }
type TeamUserMapInput interface {
	pulumi.Input

	ToTeamUserMapOutput() TeamUserMapOutput
	ToTeamUserMapOutputWithContext(context.Context) TeamUserMapOutput
}

type TeamUserMap map[string]TeamUserInput

func (TeamUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamUser)(nil)).Elem()
}

func (i TeamUserMap) ToTeamUserMapOutput() TeamUserMapOutput {
	return i.ToTeamUserMapOutputWithContext(context.Background())
}

func (i TeamUserMap) ToTeamUserMapOutputWithContext(ctx context.Context) TeamUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamUserMapOutput)
}

func (i TeamUserMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*TeamUser] {
	return pulumix.Output[map[string]*TeamUser]{
		OutputState: i.ToTeamUserMapOutputWithContext(ctx).OutputState,
	}
}

type TeamUserOutput struct{ *pulumi.OutputState }

func (TeamUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamUser)(nil)).Elem()
}

func (o TeamUserOutput) ToTeamUserOutput() TeamUserOutput {
	return o
}

func (o TeamUserOutput) ToTeamUserOutputWithContext(ctx context.Context) TeamUserOutput {
	return o
}

func (o TeamUserOutput) ToOutput(ctx context.Context) pulumix.Output[*TeamUser] {
	return pulumix.Output[*TeamUser]{
		OutputState: o.OutputState,
	}
}

// **(Required, ForceNew, String)** The id of the team.
func (o TeamUserOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamUser) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// **(Required, ForceNew, String)** The id of the user.
func (o TeamUserOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamUser) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type TeamUserArrayOutput struct{ *pulumi.OutputState }

func (TeamUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamUser)(nil)).Elem()
}

func (o TeamUserArrayOutput) ToTeamUserArrayOutput() TeamUserArrayOutput {
	return o
}

func (o TeamUserArrayOutput) ToTeamUserArrayOutputWithContext(ctx context.Context) TeamUserArrayOutput {
	return o
}

func (o TeamUserArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*TeamUser] {
	return pulumix.Output[[]*TeamUser]{
		OutputState: o.OutputState,
	}
}

func (o TeamUserArrayOutput) Index(i pulumi.IntInput) TeamUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamUser {
		return vs[0].([]*TeamUser)[vs[1].(int)]
	}).(TeamUserOutput)
}

type TeamUserMapOutput struct{ *pulumi.OutputState }

func (TeamUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamUser)(nil)).Elem()
}

func (o TeamUserMapOutput) ToTeamUserMapOutput() TeamUserMapOutput {
	return o
}

func (o TeamUserMapOutput) ToTeamUserMapOutputWithContext(ctx context.Context) TeamUserMapOutput {
	return o
}

func (o TeamUserMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*TeamUser] {
	return pulumix.Output[map[string]*TeamUser]{
		OutputState: o.OutputState,
	}
}

func (o TeamUserMapOutput) MapIndex(k pulumi.StringInput) TeamUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamUser {
		return vs[0].(map[string]*TeamUser)[vs[1].(string)]
	}).(TeamUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamUserInput)(nil)).Elem(), &TeamUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamUserArrayInput)(nil)).Elem(), TeamUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamUserMapInput)(nil)).Elem(), TeamUserMap{})
	pulumi.RegisterOutputType(TeamUserOutput{})
	pulumi.RegisterOutputType(TeamUserArrayOutput{})
	pulumi.RegisterOutputType(TeamUserMapOutput{})
}
