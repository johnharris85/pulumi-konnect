// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents a role assigned to a user to access a given entity
//
// ## Import
//
// User roles can be imported using a proper value of `id` as described above
type UserRole struct {
	pulumi.CustomResourceState

	// **(Required, ForceNew, String)** The id of the entity for which the role applies.
	EntityId pulumi.StringOutput `pulumi:"entityId"`
	// **(Required, ForceNew, String)** The region of the entity for which the role applies.
	EntityRegion pulumi.StringOutput `pulumi:"entityRegion"`
	// **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
	EntityTypeDisplayName pulumi.StringOutput `pulumi:"entityTypeDisplayName"`
	// **(Required, ForceNew, String)** The display name of the role.
	RoleDisplayName pulumi.StringOutput `pulumi:"roleDisplayName"`
	// **(Required, ForceNew, String)** The id of the user assigned the role
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUserRole registers a new resource with the given unique name, arguments, and options.
func NewUserRole(ctx *pulumi.Context,
	name string, args *UserRoleArgs, opts ...pulumi.ResourceOption) (*UserRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntityId == nil {
		return nil, errors.New("invalid value for required argument 'EntityId'")
	}
	if args.EntityRegion == nil {
		return nil, errors.New("invalid value for required argument 'EntityRegion'")
	}
	if args.EntityTypeDisplayName == nil {
		return nil, errors.New("invalid value for required argument 'EntityTypeDisplayName'")
	}
	if args.RoleDisplayName == nil {
		return nil, errors.New("invalid value for required argument 'RoleDisplayName'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserRole
	err := ctx.RegisterResource("konnect:index/userRole:UserRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserRole gets an existing UserRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserRoleState, opts ...pulumi.ResourceOption) (*UserRole, error) {
	var resource UserRole
	err := ctx.ReadResource("konnect:index/userRole:UserRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserRole resources.
type userRoleState struct {
	// **(Required, ForceNew, String)** The id of the entity for which the role applies.
	EntityId *string `pulumi:"entityId"`
	// **(Required, ForceNew, String)** The region of the entity for which the role applies.
	EntityRegion *string `pulumi:"entityRegion"`
	// **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
	EntityTypeDisplayName *string `pulumi:"entityTypeDisplayName"`
	// **(Required, ForceNew, String)** The display name of the role.
	RoleDisplayName *string `pulumi:"roleDisplayName"`
	// **(Required, ForceNew, String)** The id of the user assigned the role
	UserId *string `pulumi:"userId"`
}

type UserRoleState struct {
	// **(Required, ForceNew, String)** The id of the entity for which the role applies.
	EntityId pulumi.StringPtrInput
	// **(Required, ForceNew, String)** The region of the entity for which the role applies.
	EntityRegion pulumi.StringPtrInput
	// **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
	EntityTypeDisplayName pulumi.StringPtrInput
	// **(Required, ForceNew, String)** The display name of the role.
	RoleDisplayName pulumi.StringPtrInput
	// **(Required, ForceNew, String)** The id of the user assigned the role
	UserId pulumi.StringPtrInput
}

func (UserRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*userRoleState)(nil)).Elem()
}

type userRoleArgs struct {
	// **(Required, ForceNew, String)** The id of the entity for which the role applies.
	EntityId string `pulumi:"entityId"`
	// **(Required, ForceNew, String)** The region of the entity for which the role applies.
	EntityRegion string `pulumi:"entityRegion"`
	// **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
	EntityTypeDisplayName string `pulumi:"entityTypeDisplayName"`
	// **(Required, ForceNew, String)** The display name of the role.
	RoleDisplayName string `pulumi:"roleDisplayName"`
	// **(Required, ForceNew, String)** The id of the user assigned the role
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UserRole resource.
type UserRoleArgs struct {
	// **(Required, ForceNew, String)** The id of the entity for which the role applies.
	EntityId pulumi.StringInput
	// **(Required, ForceNew, String)** The region of the entity for which the role applies.
	EntityRegion pulumi.StringInput
	// **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
	EntityTypeDisplayName pulumi.StringInput
	// **(Required, ForceNew, String)** The display name of the role.
	RoleDisplayName pulumi.StringInput
	// **(Required, ForceNew, String)** The id of the user assigned the role
	UserId pulumi.StringInput
}

func (UserRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userRoleArgs)(nil)).Elem()
}

type UserRoleInput interface {
	pulumi.Input

	ToUserRoleOutput() UserRoleOutput
	ToUserRoleOutputWithContext(ctx context.Context) UserRoleOutput
}

func (*UserRole) ElementType() reflect.Type {
	return reflect.TypeOf((**UserRole)(nil)).Elem()
}

func (i *UserRole) ToUserRoleOutput() UserRoleOutput {
	return i.ToUserRoleOutputWithContext(context.Background())
}

func (i *UserRole) ToUserRoleOutputWithContext(ctx context.Context) UserRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRoleOutput)
}

func (i *UserRole) ToOutput(ctx context.Context) pulumix.Output[*UserRole] {
	return pulumix.Output[*UserRole]{
		OutputState: i.ToUserRoleOutputWithContext(ctx).OutputState,
	}
}

// UserRoleArrayInput is an input type that accepts UserRoleArray and UserRoleArrayOutput values.
// You can construct a concrete instance of `UserRoleArrayInput` via:
//
//	UserRoleArray{ UserRoleArgs{...} }
type UserRoleArrayInput interface {
	pulumi.Input

	ToUserRoleArrayOutput() UserRoleArrayOutput
	ToUserRoleArrayOutputWithContext(context.Context) UserRoleArrayOutput
}

type UserRoleArray []UserRoleInput

func (UserRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserRole)(nil)).Elem()
}

func (i UserRoleArray) ToUserRoleArrayOutput() UserRoleArrayOutput {
	return i.ToUserRoleArrayOutputWithContext(context.Background())
}

func (i UserRoleArray) ToUserRoleArrayOutputWithContext(ctx context.Context) UserRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRoleArrayOutput)
}

func (i UserRoleArray) ToOutput(ctx context.Context) pulumix.Output[[]*UserRole] {
	return pulumix.Output[[]*UserRole]{
		OutputState: i.ToUserRoleArrayOutputWithContext(ctx).OutputState,
	}
}

// UserRoleMapInput is an input type that accepts UserRoleMap and UserRoleMapOutput values.
// You can construct a concrete instance of `UserRoleMapInput` via:
//
//	UserRoleMap{ "key": UserRoleArgs{...} }
type UserRoleMapInput interface {
	pulumi.Input

	ToUserRoleMapOutput() UserRoleMapOutput
	ToUserRoleMapOutputWithContext(context.Context) UserRoleMapOutput
}

type UserRoleMap map[string]UserRoleInput

func (UserRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserRole)(nil)).Elem()
}

func (i UserRoleMap) ToUserRoleMapOutput() UserRoleMapOutput {
	return i.ToUserRoleMapOutputWithContext(context.Background())
}

func (i UserRoleMap) ToUserRoleMapOutputWithContext(ctx context.Context) UserRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRoleMapOutput)
}

func (i UserRoleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserRole] {
	return pulumix.Output[map[string]*UserRole]{
		OutputState: i.ToUserRoleMapOutputWithContext(ctx).OutputState,
	}
}

type UserRoleOutput struct{ *pulumi.OutputState }

func (UserRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserRole)(nil)).Elem()
}

func (o UserRoleOutput) ToUserRoleOutput() UserRoleOutput {
	return o
}

func (o UserRoleOutput) ToUserRoleOutputWithContext(ctx context.Context) UserRoleOutput {
	return o
}

func (o UserRoleOutput) ToOutput(ctx context.Context) pulumix.Output[*UserRole] {
	return pulumix.Output[*UserRole]{
		OutputState: o.OutputState,
	}
}

// **(Required, ForceNew, String)** The id of the entity for which the role applies.
func (o UserRoleOutput) EntityId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserRole) pulumi.StringOutput { return v.EntityId }).(pulumi.StringOutput)
}

// **(Required, ForceNew, String)** The region of the entity for which the role applies.
func (o UserRoleOutput) EntityRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *UserRole) pulumi.StringOutput { return v.EntityRegion }).(pulumi.StringOutput)
}

// **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
func (o UserRoleOutput) EntityTypeDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserRole) pulumi.StringOutput { return v.EntityTypeDisplayName }).(pulumi.StringOutput)
}

// **(Required, ForceNew, String)** The display name of the role.
func (o UserRoleOutput) RoleDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserRole) pulumi.StringOutput { return v.RoleDisplayName }).(pulumi.StringOutput)
}

// **(Required, ForceNew, String)** The id of the user assigned the role
func (o UserRoleOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserRole) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type UserRoleArrayOutput struct{ *pulumi.OutputState }

func (UserRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserRole)(nil)).Elem()
}

func (o UserRoleArrayOutput) ToUserRoleArrayOutput() UserRoleArrayOutput {
	return o
}

func (o UserRoleArrayOutput) ToUserRoleArrayOutputWithContext(ctx context.Context) UserRoleArrayOutput {
	return o
}

func (o UserRoleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*UserRole] {
	return pulumix.Output[[]*UserRole]{
		OutputState: o.OutputState,
	}
}

func (o UserRoleArrayOutput) Index(i pulumi.IntInput) UserRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserRole {
		return vs[0].([]*UserRole)[vs[1].(int)]
	}).(UserRoleOutput)
}

type UserRoleMapOutput struct{ *pulumi.OutputState }

func (UserRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserRole)(nil)).Elem()
}

func (o UserRoleMapOutput) ToUserRoleMapOutput() UserRoleMapOutput {
	return o
}

func (o UserRoleMapOutput) ToUserRoleMapOutputWithContext(ctx context.Context) UserRoleMapOutput {
	return o
}

func (o UserRoleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserRole] {
	return pulumix.Output[map[string]*UserRole]{
		OutputState: o.OutputState,
	}
}

func (o UserRoleMapOutput) MapIndex(k pulumi.StringInput) UserRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserRole {
		return vs[0].(map[string]*UserRole)[vs[1].(string)]
	}).(UserRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserRoleInput)(nil)).Elem(), &UserRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserRoleArrayInput)(nil)).Elem(), UserRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserRoleMapInput)(nil)).Elem(), UserRoleMap{})
	pulumi.RegisterOutputType(UserRoleOutput{})
	pulumi.RegisterOutputType(UserRoleArrayOutput{})
	pulumi.RegisterOutputType(UserRoleMapOutput{})
}
