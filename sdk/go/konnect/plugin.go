// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents a plugin within a runtime group
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			runtimeGroup, err := konnect.LookupRuntimeGroup(ctx, &konnect.LookupRuntimeGroupArgs{
//				Name: pulumi.StringRef("TestRuntimeGroup"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = konnect.NewPlugin(ctx, "example", &konnect.PluginArgs{
//				RuntimeGroupId: *pulumi.String(runtimeGroup.Id),
//				ConfigJson:     pulumi.String("{\n  \"minute\": 5\n}\n"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Plugins can be imported using a proper value of `id` as described above
type Plugin struct {
	pulumi.CustomResourceState

	// **(JSON)** The full configuration properties for the plugin, including all properties with their default values not specified in `config`.
	ConfigAllJson pulumi.StringOutput `pulumi:"configAllJson"`
	// **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
	ConfigJson pulumi.StringPtrOutput `pulumi:"configJson"`
	// **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
	ConsumerId pulumi.StringPtrOutput `pulumi:"consumerId"`
	// **(Optional, Boolean)** Whether the plugin is active. Default: `true`
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// **(Optional, String)** The instance name of the plugin. Default: `-`
	InstanceName pulumi.StringPtrOutput `pulumi:"instanceName"`
	// **(Required, String)** The name of the plugin which must match a valid installed plugin.
	Name pulumi.StringOutput `pulumi:"name"`
	// **(String)** Id of the plugin alone
	PluginId pulumi.StringOutput `pulumi:"pluginId"`
	// **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
	RouteId pulumi.StringPtrOutput `pulumi:"routeId"`
	// **(Required, String)** The id of the runtime group.
	RuntimeGroupId pulumi.StringOutput `pulumi:"runtimeGroupId"`
	// **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
	ServiceId pulumi.StringPtrOutput `pulumi:"serviceId"`
}

// NewPlugin registers a new resource with the given unique name, arguments, and options.
func NewPlugin(ctx *pulumi.Context,
	name string, args *PluginArgs, opts ...pulumi.ResourceOption) (*Plugin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RuntimeGroupId == nil {
		return nil, errors.New("invalid value for required argument 'RuntimeGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Plugin
	err := ctx.RegisterResource("konnect:index/plugin:Plugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlugin gets an existing Plugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PluginState, opts ...pulumi.ResourceOption) (*Plugin, error) {
	var resource Plugin
	err := ctx.ReadResource("konnect:index/plugin:Plugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Plugin resources.
type pluginState struct {
	// **(JSON)** The full configuration properties for the plugin, including all properties with their default values not specified in `config`.
	ConfigAllJson *string `pulumi:"configAllJson"`
	// **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
	ConfigJson *string `pulumi:"configJson"`
	// **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
	ConsumerId *string `pulumi:"consumerId"`
	// **(Optional, Boolean)** Whether the plugin is active. Default: `true`
	Enabled *bool `pulumi:"enabled"`
	// **(Optional, String)** The instance name of the plugin. Default: `-`
	InstanceName *string `pulumi:"instanceName"`
	// **(Required, String)** The name of the plugin which must match a valid installed plugin.
	Name *string `pulumi:"name"`
	// **(String)** Id of the plugin alone
	PluginId *string `pulumi:"pluginId"`
	// **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
	Protocols []string `pulumi:"protocols"`
	// **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
	RouteId *string `pulumi:"routeId"`
	// **(Required, String)** The id of the runtime group.
	RuntimeGroupId *string `pulumi:"runtimeGroupId"`
	// **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
	ServiceId *string `pulumi:"serviceId"`
}

type PluginState struct {
	// **(JSON)** The full configuration properties for the plugin, including all properties with their default values not specified in `config`.
	ConfigAllJson pulumi.StringPtrInput
	// **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
	ConfigJson pulumi.StringPtrInput
	// **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
	ConsumerId pulumi.StringPtrInput
	// **(Optional, Boolean)** Whether the plugin is active. Default: `true`
	Enabled pulumi.BoolPtrInput
	// **(Optional, String)** The instance name of the plugin. Default: `-`
	InstanceName pulumi.StringPtrInput
	// **(Required, String)** The name of the plugin which must match a valid installed plugin.
	Name pulumi.StringPtrInput
	// **(String)** Id of the plugin alone
	PluginId pulumi.StringPtrInput
	// **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
	Protocols pulumi.StringArrayInput
	// **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
	RouteId pulumi.StringPtrInput
	// **(Required, String)** The id of the runtime group.
	RuntimeGroupId pulumi.StringPtrInput
	// **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
	ServiceId pulumi.StringPtrInput
}

func (PluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginState)(nil)).Elem()
}

type pluginArgs struct {
	// **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
	ConfigJson *string `pulumi:"configJson"`
	// **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
	ConsumerId *string `pulumi:"consumerId"`
	// **(Optional, Boolean)** Whether the plugin is active. Default: `true`
	Enabled *bool `pulumi:"enabled"`
	// **(Optional, String)** The instance name of the plugin. Default: `-`
	InstanceName *string `pulumi:"instanceName"`
	// **(Required, String)** The name of the plugin which must match a valid installed plugin.
	Name *string `pulumi:"name"`
	// **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
	Protocols []string `pulumi:"protocols"`
	// **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
	RouteId *string `pulumi:"routeId"`
	// **(Required, String)** The id of the runtime group.
	RuntimeGroupId string `pulumi:"runtimeGroupId"`
	// **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
	ServiceId *string `pulumi:"serviceId"`
}

// The set of arguments for constructing a Plugin resource.
type PluginArgs struct {
	// **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
	ConfigJson pulumi.StringPtrInput
	// **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
	ConsumerId pulumi.StringPtrInput
	// **(Optional, Boolean)** Whether the plugin is active. Default: `true`
	Enabled pulumi.BoolPtrInput
	// **(Optional, String)** The instance name of the plugin. Default: `-`
	InstanceName pulumi.StringPtrInput
	// **(Required, String)** The name of the plugin which must match a valid installed plugin.
	Name pulumi.StringPtrInput
	// **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
	Protocols pulumi.StringArrayInput
	// **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
	RouteId pulumi.StringPtrInput
	// **(Required, String)** The id of the runtime group.
	RuntimeGroupId pulumi.StringInput
	// **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
	ServiceId pulumi.StringPtrInput
}

func (PluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginArgs)(nil)).Elem()
}

type PluginInput interface {
	pulumi.Input

	ToPluginOutput() PluginOutput
	ToPluginOutputWithContext(ctx context.Context) PluginOutput
}

func (*Plugin) ElementType() reflect.Type {
	return reflect.TypeOf((**Plugin)(nil)).Elem()
}

func (i *Plugin) ToPluginOutput() PluginOutput {
	return i.ToPluginOutputWithContext(context.Background())
}

func (i *Plugin) ToPluginOutputWithContext(ctx context.Context) PluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginOutput)
}

func (i *Plugin) ToOutput(ctx context.Context) pulumix.Output[*Plugin] {
	return pulumix.Output[*Plugin]{
		OutputState: i.ToPluginOutputWithContext(ctx).OutputState,
	}
}

// PluginArrayInput is an input type that accepts PluginArray and PluginArrayOutput values.
// You can construct a concrete instance of `PluginArrayInput` via:
//
//	PluginArray{ PluginArgs{...} }
type PluginArrayInput interface {
	pulumi.Input

	ToPluginArrayOutput() PluginArrayOutput
	ToPluginArrayOutputWithContext(context.Context) PluginArrayOutput
}

type PluginArray []PluginInput

func (PluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Plugin)(nil)).Elem()
}

func (i PluginArray) ToPluginArrayOutput() PluginArrayOutput {
	return i.ToPluginArrayOutputWithContext(context.Background())
}

func (i PluginArray) ToPluginArrayOutputWithContext(ctx context.Context) PluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginArrayOutput)
}

func (i PluginArray) ToOutput(ctx context.Context) pulumix.Output[[]*Plugin] {
	return pulumix.Output[[]*Plugin]{
		OutputState: i.ToPluginArrayOutputWithContext(ctx).OutputState,
	}
}

// PluginMapInput is an input type that accepts PluginMap and PluginMapOutput values.
// You can construct a concrete instance of `PluginMapInput` via:
//
//	PluginMap{ "key": PluginArgs{...} }
type PluginMapInput interface {
	pulumi.Input

	ToPluginMapOutput() PluginMapOutput
	ToPluginMapOutputWithContext(context.Context) PluginMapOutput
}

type PluginMap map[string]PluginInput

func (PluginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Plugin)(nil)).Elem()
}

func (i PluginMap) ToPluginMapOutput() PluginMapOutput {
	return i.ToPluginMapOutputWithContext(context.Background())
}

func (i PluginMap) ToPluginMapOutputWithContext(ctx context.Context) PluginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginMapOutput)
}

func (i PluginMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Plugin] {
	return pulumix.Output[map[string]*Plugin]{
		OutputState: i.ToPluginMapOutputWithContext(ctx).OutputState,
	}
}

type PluginOutput struct{ *pulumi.OutputState }

func (PluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Plugin)(nil)).Elem()
}

func (o PluginOutput) ToPluginOutput() PluginOutput {
	return o
}

func (o PluginOutput) ToPluginOutputWithContext(ctx context.Context) PluginOutput {
	return o
}

func (o PluginOutput) ToOutput(ctx context.Context) pulumix.Output[*Plugin] {
	return pulumix.Output[*Plugin]{
		OutputState: o.OutputState,
	}
}

// **(JSON)** The full configuration properties for the plugin, including all properties with their default values not specified in `config`.
func (o PluginOutput) ConfigAllJson() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.ConfigAllJson }).(pulumi.StringOutput)
}

// **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
func (o PluginOutput) ConfigJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringPtrOutput { return v.ConfigJson }).(pulumi.StringPtrOutput)
}

// **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
func (o PluginOutput) ConsumerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringPtrOutput { return v.ConsumerId }).(pulumi.StringPtrOutput)
}

// **(Optional, Boolean)** Whether the plugin is active. Default: `true`
func (o PluginOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Plugin) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// **(Optional, String)** The instance name of the plugin. Default: `-`
func (o PluginOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringPtrOutput { return v.InstanceName }).(pulumi.StringPtrOutput)
}

// **(Required, String)** The name of the plugin which must match a valid installed plugin.
func (o PluginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// **(String)** Id of the plugin alone
func (o PluginOutput) PluginId() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.PluginId }).(pulumi.StringOutput)
}

// **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
func (o PluginOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
func (o PluginOutput) RouteId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringPtrOutput { return v.RouteId }).(pulumi.StringPtrOutput)
}

// **(Required, String)** The id of the runtime group.
func (o PluginOutput) RuntimeGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.RuntimeGroupId }).(pulumi.StringOutput)
}

// **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
func (o PluginOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringPtrOutput { return v.ServiceId }).(pulumi.StringPtrOutput)
}

type PluginArrayOutput struct{ *pulumi.OutputState }

func (PluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Plugin)(nil)).Elem()
}

func (o PluginArrayOutput) ToPluginArrayOutput() PluginArrayOutput {
	return o
}

func (o PluginArrayOutput) ToPluginArrayOutputWithContext(ctx context.Context) PluginArrayOutput {
	return o
}

func (o PluginArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Plugin] {
	return pulumix.Output[[]*Plugin]{
		OutputState: o.OutputState,
	}
}

func (o PluginArrayOutput) Index(i pulumi.IntInput) PluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Plugin {
		return vs[0].([]*Plugin)[vs[1].(int)]
	}).(PluginOutput)
}

type PluginMapOutput struct{ *pulumi.OutputState }

func (PluginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Plugin)(nil)).Elem()
}

func (o PluginMapOutput) ToPluginMapOutput() PluginMapOutput {
	return o
}

func (o PluginMapOutput) ToPluginMapOutputWithContext(ctx context.Context) PluginMapOutput {
	return o
}

func (o PluginMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Plugin] {
	return pulumix.Output[map[string]*Plugin]{
		OutputState: o.OutputState,
	}
}

func (o PluginMapOutput) MapIndex(k pulumi.StringInput) PluginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Plugin {
		return vs[0].(map[string]*Plugin)[vs[1].(string)]
	}).(PluginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PluginInput)(nil)).Elem(), &Plugin{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginArrayInput)(nil)).Elem(), PluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginMapInput)(nil)).Elem(), PluginMap{})
	pulumi.RegisterOutputType(PluginOutput{})
	pulumi.RegisterOutputType(PluginArrayOutput{})
	pulumi.RegisterOutputType(PluginMapOutput{})
}
