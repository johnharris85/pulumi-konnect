// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents a runtime group
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := konnect.NewRuntimeGroup(ctx, "example", &konnect.RuntimeGroupArgs{
//				Description: pulumi.String("TestRuntimeGroup"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Runtime groups can be imported using a proper value of `id` as described above
type RuntimeGroup struct {
	pulumi.CustomResourceState

	// **(String)** The cluster type of the runtime group.
	ClusterType pulumi.StringOutput `pulumi:"clusterType"`
	// **(String)** The control plane endpoint URL of the runtime group.
	ControlPlaneEndpoint pulumi.StringOutput `pulumi:"controlPlaneEndpoint"`
	// **(Optional, String)** The description of the runtime group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// **(Required, String)** The name of the runtime group.
	Name pulumi.StringOutput `pulumi:"name"`
	// **(String)** The telemetry endpoint URL of the runtime group.
	TelemetryEndpoint pulumi.StringOutput `pulumi:"telemetryEndpoint"`
}

// NewRuntimeGroup registers a new resource with the given unique name, arguments, and options.
func NewRuntimeGroup(ctx *pulumi.Context,
	name string, args *RuntimeGroupArgs, opts ...pulumi.ResourceOption) (*RuntimeGroup, error) {
	if args == nil {
		args = &RuntimeGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuntimeGroup
	err := ctx.RegisterResource("konnect:index/runtimeGroup:RuntimeGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuntimeGroup gets an existing RuntimeGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuntimeGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuntimeGroupState, opts ...pulumi.ResourceOption) (*RuntimeGroup, error) {
	var resource RuntimeGroup
	err := ctx.ReadResource("konnect:index/runtimeGroup:RuntimeGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuntimeGroup resources.
type runtimeGroupState struct {
	// **(String)** The cluster type of the runtime group.
	ClusterType *string `pulumi:"clusterType"`
	// **(String)** The control plane endpoint URL of the runtime group.
	ControlPlaneEndpoint *string `pulumi:"controlPlaneEndpoint"`
	// **(Optional, String)** The description of the runtime group.
	Description *string `pulumi:"description"`
	// **(Required, String)** The name of the runtime group.
	Name *string `pulumi:"name"`
	// **(String)** The telemetry endpoint URL of the runtime group.
	TelemetryEndpoint *string `pulumi:"telemetryEndpoint"`
}

type RuntimeGroupState struct {
	// **(String)** The cluster type of the runtime group.
	ClusterType pulumi.StringPtrInput
	// **(String)** The control plane endpoint URL of the runtime group.
	ControlPlaneEndpoint pulumi.StringPtrInput
	// **(Optional, String)** The description of the runtime group.
	Description pulumi.StringPtrInput
	// **(Required, String)** The name of the runtime group.
	Name pulumi.StringPtrInput
	// **(String)** The telemetry endpoint URL of the runtime group.
	TelemetryEndpoint pulumi.StringPtrInput
}

func (RuntimeGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*runtimeGroupState)(nil)).Elem()
}

type runtimeGroupArgs struct {
	// **(Optional, String)** The description of the runtime group.
	Description *string `pulumi:"description"`
	// **(Required, String)** The name of the runtime group.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RuntimeGroup resource.
type RuntimeGroupArgs struct {
	// **(Optional, String)** The description of the runtime group.
	Description pulumi.StringPtrInput
	// **(Required, String)** The name of the runtime group.
	Name pulumi.StringPtrInput
}

func (RuntimeGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*runtimeGroupArgs)(nil)).Elem()
}

type RuntimeGroupInput interface {
	pulumi.Input

	ToRuntimeGroupOutput() RuntimeGroupOutput
	ToRuntimeGroupOutputWithContext(ctx context.Context) RuntimeGroupOutput
}

func (*RuntimeGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeGroup)(nil)).Elem()
}

func (i *RuntimeGroup) ToRuntimeGroupOutput() RuntimeGroupOutput {
	return i.ToRuntimeGroupOutputWithContext(context.Background())
}

func (i *RuntimeGroup) ToRuntimeGroupOutputWithContext(ctx context.Context) RuntimeGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeGroupOutput)
}

func (i *RuntimeGroup) ToOutput(ctx context.Context) pulumix.Output[*RuntimeGroup] {
	return pulumix.Output[*RuntimeGroup]{
		OutputState: i.ToRuntimeGroupOutputWithContext(ctx).OutputState,
	}
}

// RuntimeGroupArrayInput is an input type that accepts RuntimeGroupArray and RuntimeGroupArrayOutput values.
// You can construct a concrete instance of `RuntimeGroupArrayInput` via:
//
//	RuntimeGroupArray{ RuntimeGroupArgs{...} }
type RuntimeGroupArrayInput interface {
	pulumi.Input

	ToRuntimeGroupArrayOutput() RuntimeGroupArrayOutput
	ToRuntimeGroupArrayOutputWithContext(context.Context) RuntimeGroupArrayOutput
}

type RuntimeGroupArray []RuntimeGroupInput

func (RuntimeGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuntimeGroup)(nil)).Elem()
}

func (i RuntimeGroupArray) ToRuntimeGroupArrayOutput() RuntimeGroupArrayOutput {
	return i.ToRuntimeGroupArrayOutputWithContext(context.Background())
}

func (i RuntimeGroupArray) ToRuntimeGroupArrayOutputWithContext(ctx context.Context) RuntimeGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeGroupArrayOutput)
}

func (i RuntimeGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]*RuntimeGroup] {
	return pulumix.Output[[]*RuntimeGroup]{
		OutputState: i.ToRuntimeGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// RuntimeGroupMapInput is an input type that accepts RuntimeGroupMap and RuntimeGroupMapOutput values.
// You can construct a concrete instance of `RuntimeGroupMapInput` via:
//
//	RuntimeGroupMap{ "key": RuntimeGroupArgs{...} }
type RuntimeGroupMapInput interface {
	pulumi.Input

	ToRuntimeGroupMapOutput() RuntimeGroupMapOutput
	ToRuntimeGroupMapOutputWithContext(context.Context) RuntimeGroupMapOutput
}

type RuntimeGroupMap map[string]RuntimeGroupInput

func (RuntimeGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuntimeGroup)(nil)).Elem()
}

func (i RuntimeGroupMap) ToRuntimeGroupMapOutput() RuntimeGroupMapOutput {
	return i.ToRuntimeGroupMapOutputWithContext(context.Background())
}

func (i RuntimeGroupMap) ToRuntimeGroupMapOutputWithContext(ctx context.Context) RuntimeGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeGroupMapOutput)
}

func (i RuntimeGroupMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RuntimeGroup] {
	return pulumix.Output[map[string]*RuntimeGroup]{
		OutputState: i.ToRuntimeGroupMapOutputWithContext(ctx).OutputState,
	}
}

type RuntimeGroupOutput struct{ *pulumi.OutputState }

func (RuntimeGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeGroup)(nil)).Elem()
}

func (o RuntimeGroupOutput) ToRuntimeGroupOutput() RuntimeGroupOutput {
	return o
}

func (o RuntimeGroupOutput) ToRuntimeGroupOutputWithContext(ctx context.Context) RuntimeGroupOutput {
	return o
}

func (o RuntimeGroupOutput) ToOutput(ctx context.Context) pulumix.Output[*RuntimeGroup] {
	return pulumix.Output[*RuntimeGroup]{
		OutputState: o.OutputState,
	}
}

// **(String)** The cluster type of the runtime group.
func (o RuntimeGroupOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v *RuntimeGroup) pulumi.StringOutput { return v.ClusterType }).(pulumi.StringOutput)
}

// **(String)** The control plane endpoint URL of the runtime group.
func (o RuntimeGroupOutput) ControlPlaneEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *RuntimeGroup) pulumi.StringOutput { return v.ControlPlaneEndpoint }).(pulumi.StringOutput)
}

// **(Optional, String)** The description of the runtime group.
func (o RuntimeGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// **(Required, String)** The name of the runtime group.
func (o RuntimeGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RuntimeGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// **(String)** The telemetry endpoint URL of the runtime group.
func (o RuntimeGroupOutput) TelemetryEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *RuntimeGroup) pulumi.StringOutput { return v.TelemetryEndpoint }).(pulumi.StringOutput)
}

type RuntimeGroupArrayOutput struct{ *pulumi.OutputState }

func (RuntimeGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuntimeGroup)(nil)).Elem()
}

func (o RuntimeGroupArrayOutput) ToRuntimeGroupArrayOutput() RuntimeGroupArrayOutput {
	return o
}

func (o RuntimeGroupArrayOutput) ToRuntimeGroupArrayOutputWithContext(ctx context.Context) RuntimeGroupArrayOutput {
	return o
}

func (o RuntimeGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RuntimeGroup] {
	return pulumix.Output[[]*RuntimeGroup]{
		OutputState: o.OutputState,
	}
}

func (o RuntimeGroupArrayOutput) Index(i pulumi.IntInput) RuntimeGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuntimeGroup {
		return vs[0].([]*RuntimeGroup)[vs[1].(int)]
	}).(RuntimeGroupOutput)
}

type RuntimeGroupMapOutput struct{ *pulumi.OutputState }

func (RuntimeGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuntimeGroup)(nil)).Elem()
}

func (o RuntimeGroupMapOutput) ToRuntimeGroupMapOutput() RuntimeGroupMapOutput {
	return o
}

func (o RuntimeGroupMapOutput) ToRuntimeGroupMapOutputWithContext(ctx context.Context) RuntimeGroupMapOutput {
	return o
}

func (o RuntimeGroupMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RuntimeGroup] {
	return pulumix.Output[map[string]*RuntimeGroup]{
		OutputState: o.OutputState,
	}
}

func (o RuntimeGroupMapOutput) MapIndex(k pulumi.StringInput) RuntimeGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuntimeGroup {
		return vs[0].(map[string]*RuntimeGroup)[vs[1].(string)]
	}).(RuntimeGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeGroupInput)(nil)).Elem(), &RuntimeGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeGroupArrayInput)(nil)).Elem(), RuntimeGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeGroupMapInput)(nil)).Elem(), RuntimeGroupMap{})
	pulumi.RegisterOutputType(RuntimeGroupOutput{})
	pulumi.RegisterOutputType(RuntimeGroupArrayOutput{})
	pulumi.RegisterOutputType(RuntimeGroupMapOutput{})
}
