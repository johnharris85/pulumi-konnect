// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents a service within a runtime group
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			runtimeGroup, err := konnect.LookupRuntimeGroup(ctx, &konnect.LookupRuntimeGroupArgs{
//				Name: pulumi.StringRef("TestRuntimeGroup"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = konnect.NewService(ctx, "example", &konnect.ServiceArgs{
//				RuntimeGroupId: *pulumi.String(runtimeGroup.Id),
//				Host:           pulumi.String("mockbin.org"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Services can be imported using a proper value of `id` as described above
type Service struct {
	pulumi.CustomResourceState

	// **(Optional, Integer)** The timeout in milliseconds for establishing a connection to the host. Default: `60000`
	ConnectTimeout pulumi.IntPtrOutput `pulumi:"connectTimeout"`
	// **(Optional, Boolean)** Whether the service is active. Default: `true`
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// **(Required, String)** The host of the service.
	Host pulumi.StringOutput `pulumi:"host"`
	// **(Optional, String)** The name of the service.
	Name pulumi.StringOutput `pulumi:"name"`
	// **(Optional, String)** The path to be used in requests to the host.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// **(Optional, Integer)** The port used to communicate with the host. Default: `80`
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// **(Optional, String)** The protocol used to communicate with the host. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// **(Optional, Integer)** The timeout in milliseconds between two successive read operations for transmitting a request to the host. Default: `60000`
	ReadTimeout pulumi.IntPtrOutput `pulumi:"readTimeout"`
	// **(Optional, Integer)** The number of retries to execute upon failure to proxy. Default: `5`
	Retries pulumi.IntPtrOutput `pulumi:"retries"`
	// **(Required, String)** The id of the runtime group.
	RuntimeGroupId pulumi.StringOutput `pulumi:"runtimeGroupId"`
	// **(String)** Id of the service alone
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// **(Optional, Integer)** The timeout in milliseconds between two successive write operations for transmitting a request to the host. Default: `60000`
	WriteTimeout pulumi.IntPtrOutput `pulumi:"writeTimeout"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.RuntimeGroupId == nil {
		return nil, errors.New("invalid value for required argument 'RuntimeGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("konnect:index/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("konnect:index/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// **(Optional, Integer)** The timeout in milliseconds for establishing a connection to the host. Default: `60000`
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// **(Optional, Boolean)** Whether the service is active. Default: `true`
	Enabled *bool `pulumi:"enabled"`
	// **(Required, String)** The host of the service.
	Host *string `pulumi:"host"`
	// **(Optional, String)** The name of the service.
	Name *string `pulumi:"name"`
	// **(Optional, String)** The path to be used in requests to the host.
	Path *string `pulumi:"path"`
	// **(Optional, Integer)** The port used to communicate with the host. Default: `80`
	Port *int `pulumi:"port"`
	// **(Optional, String)** The protocol used to communicate with the host. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
	Protocol *string `pulumi:"protocol"`
	// **(Optional, Integer)** The timeout in milliseconds between two successive read operations for transmitting a request to the host. Default: `60000`
	ReadTimeout *int `pulumi:"readTimeout"`
	// **(Optional, Integer)** The number of retries to execute upon failure to proxy. Default: `5`
	Retries *int `pulumi:"retries"`
	// **(Required, String)** The id of the runtime group.
	RuntimeGroupId *string `pulumi:"runtimeGroupId"`
	// **(String)** Id of the service alone
	ServiceId *string `pulumi:"serviceId"`
	// **(Optional, Integer)** The timeout in milliseconds between two successive write operations for transmitting a request to the host. Default: `60000`
	WriteTimeout *int `pulumi:"writeTimeout"`
}

type ServiceState struct {
	// **(Optional, Integer)** The timeout in milliseconds for establishing a connection to the host. Default: `60000`
	ConnectTimeout pulumi.IntPtrInput
	// **(Optional, Boolean)** Whether the service is active. Default: `true`
	Enabled pulumi.BoolPtrInput
	// **(Required, String)** The host of the service.
	Host pulumi.StringPtrInput
	// **(Optional, String)** The name of the service.
	Name pulumi.StringPtrInput
	// **(Optional, String)** The path to be used in requests to the host.
	Path pulumi.StringPtrInput
	// **(Optional, Integer)** The port used to communicate with the host. Default: `80`
	Port pulumi.IntPtrInput
	// **(Optional, String)** The protocol used to communicate with the host. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
	Protocol pulumi.StringPtrInput
	// **(Optional, Integer)** The timeout in milliseconds between two successive read operations for transmitting a request to the host. Default: `60000`
	ReadTimeout pulumi.IntPtrInput
	// **(Optional, Integer)** The number of retries to execute upon failure to proxy. Default: `5`
	Retries pulumi.IntPtrInput
	// **(Required, String)** The id of the runtime group.
	RuntimeGroupId pulumi.StringPtrInput
	// **(String)** Id of the service alone
	ServiceId pulumi.StringPtrInput
	// **(Optional, Integer)** The timeout in milliseconds between two successive write operations for transmitting a request to the host. Default: `60000`
	WriteTimeout pulumi.IntPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// **(Optional, Integer)** The timeout in milliseconds for establishing a connection to the host. Default: `60000`
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// **(Optional, Boolean)** Whether the service is active. Default: `true`
	Enabled *bool `pulumi:"enabled"`
	// **(Required, String)** The host of the service.
	Host string `pulumi:"host"`
	// **(Optional, String)** The name of the service.
	Name *string `pulumi:"name"`
	// **(Optional, String)** The path to be used in requests to the host.
	Path *string `pulumi:"path"`
	// **(Optional, Integer)** The port used to communicate with the host. Default: `80`
	Port *int `pulumi:"port"`
	// **(Optional, String)** The protocol used to communicate with the host. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
	Protocol *string `pulumi:"protocol"`
	// **(Optional, Integer)** The timeout in milliseconds between two successive read operations for transmitting a request to the host. Default: `60000`
	ReadTimeout *int `pulumi:"readTimeout"`
	// **(Optional, Integer)** The number of retries to execute upon failure to proxy. Default: `5`
	Retries *int `pulumi:"retries"`
	// **(Required, String)** The id of the runtime group.
	RuntimeGroupId string `pulumi:"runtimeGroupId"`
	// **(Optional, Integer)** The timeout in milliseconds between two successive write operations for transmitting a request to the host. Default: `60000`
	WriteTimeout *int `pulumi:"writeTimeout"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// **(Optional, Integer)** The timeout in milliseconds for establishing a connection to the host. Default: `60000`
	ConnectTimeout pulumi.IntPtrInput
	// **(Optional, Boolean)** Whether the service is active. Default: `true`
	Enabled pulumi.BoolPtrInput
	// **(Required, String)** The host of the service.
	Host pulumi.StringInput
	// **(Optional, String)** The name of the service.
	Name pulumi.StringPtrInput
	// **(Optional, String)** The path to be used in requests to the host.
	Path pulumi.StringPtrInput
	// **(Optional, Integer)** The port used to communicate with the host. Default: `80`
	Port pulumi.IntPtrInput
	// **(Optional, String)** The protocol used to communicate with the host. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
	Protocol pulumi.StringPtrInput
	// **(Optional, Integer)** The timeout in milliseconds between two successive read operations for transmitting a request to the host. Default: `60000`
	ReadTimeout pulumi.IntPtrInput
	// **(Optional, Integer)** The number of retries to execute upon failure to proxy. Default: `5`
	Retries pulumi.IntPtrInput
	// **(Required, String)** The id of the runtime group.
	RuntimeGroupId pulumi.StringInput
	// **(Optional, Integer)** The timeout in milliseconds between two successive write operations for transmitting a request to the host. Default: `60000`
	WriteTimeout pulumi.IntPtrInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

func (i *Service) ToOutput(ctx context.Context) pulumix.Output[*Service] {
	return pulumix.Output[*Service]{
		OutputState: i.ToServiceOutputWithContext(ctx).OutputState,
	}
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//	ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

func (i ServiceArray) ToOutput(ctx context.Context) pulumix.Output[[]*Service] {
	return pulumix.Output[[]*Service]{
		OutputState: i.ToServiceArrayOutputWithContext(ctx).OutputState,
	}
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//	ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

func (i ServiceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Service] {
	return pulumix.Output[map[string]*Service]{
		OutputState: i.ToServiceMapOutputWithContext(ctx).OutputState,
	}
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

func (o ServiceOutput) ToOutput(ctx context.Context) pulumix.Output[*Service] {
	return pulumix.Output[*Service]{
		OutputState: o.OutputState,
	}
}

// **(Optional, Integer)** The timeout in milliseconds for establishing a connection to the host. Default: `60000`
func (o ServiceOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.IntPtrOutput { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// **(Optional, Boolean)** Whether the service is active. Default: `true`
func (o ServiceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// **(Required, String)** The host of the service.
func (o ServiceOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// **(Optional, String)** The name of the service.
func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// **(Optional, String)** The path to be used in requests to the host.
func (o ServiceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// **(Optional, Integer)** The port used to communicate with the host. Default: `80`
func (o ServiceOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// **(Optional, String)** The protocol used to communicate with the host. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
func (o ServiceOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// **(Optional, Integer)** The timeout in milliseconds between two successive read operations for transmitting a request to the host. Default: `60000`
func (o ServiceOutput) ReadTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.IntPtrOutput { return v.ReadTimeout }).(pulumi.IntPtrOutput)
}

// **(Optional, Integer)** The number of retries to execute upon failure to proxy. Default: `5`
func (o ServiceOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.IntPtrOutput { return v.Retries }).(pulumi.IntPtrOutput)
}

// **(Required, String)** The id of the runtime group.
func (o ServiceOutput) RuntimeGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.RuntimeGroupId }).(pulumi.StringOutput)
}

// **(String)** Id of the service alone
func (o ServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// **(Optional, Integer)** The timeout in milliseconds between two successive write operations for transmitting a request to the host. Default: `60000`
func (o ServiceOutput) WriteTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.IntPtrOutput { return v.WriteTimeout }).(pulumi.IntPtrOutput)
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Service] {
	return pulumix.Output[[]*Service]{
		OutputState: o.OutputState,
	}
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Service] {
	return pulumix.Output[map[string]*Service]{
		OutputState: o.OutputState,
	}
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
