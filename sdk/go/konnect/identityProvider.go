// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents identity provider settings
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := konnect.NewIdentityProvider(ctx, "example", &konnect.IdentityProviderArgs{
//				ClientId:           pulumi.String("XXXX"),
//				ClientSecret:       pulumi.String("YYYY"),
//				EmailClaimMapping:  pulumi.String("email"),
//				GroupsClaimMapping: pulumi.String("groups"),
//				Issuer:             pulumi.String("https://example.com"),
//				LoginPath:          pulumi.String("login"),
//				NameClaimMapping:   pulumi.String("name"),
//				Scopes: pulumi.StringArray{
//					pulumi.String("email"),
//					pulumi.String("openid"),
//					pulumi.String("profile"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Identity provider can be imported using a proper value of `id` as described above
type IdentityProvider struct {
	pulumi.CustomResourceState

	// **(Optional, String)** Client ID of the identity provider.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// **(Optional, String, Sensitive)** Client secret of the identity provider.
	ClientSecret pulumi.StringPtrOutput `pulumi:"clientSecret"`
	// **(Optional, String)** Claim to map email for the identity provider.
	EmailClaimMapping pulumi.StringPtrOutput `pulumi:"emailClaimMapping"`
	// **(Optional, String)** Claim to map groups for the identity provider.
	GroupsClaimMapping pulumi.StringPtrOutput `pulumi:"groupsClaimMapping"`
	// **(Optional, String)** Issuer of the identity provider.
	Issuer pulumi.StringPtrOutput `pulumi:"issuer"`
	// **(Optional, String)** Login path of the identity provider.
	LoginPath pulumi.StringPtrOutput `pulumi:"loginPath"`
	// **(Optional, String)** Claim to map name for the identity provider.
	NameClaimMapping pulumi.StringPtrOutput `pulumi:"nameClaimMapping"`
	// **(Optional, List of String)** Scopes of the identity provider.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
}

// NewIdentityProvider registers a new resource with the given unique name, arguments, and options.
func NewIdentityProvider(ctx *pulumi.Context,
	name string, args *IdentityProviderArgs, opts ...pulumi.ResourceOption) (*IdentityProvider, error) {
	if args == nil {
		args = &IdentityProviderArgs{}
	}

	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityProvider
	err := ctx.RegisterResource("konnect:index/identityProvider:IdentityProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityProvider gets an existing IdentityProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityProviderState, opts ...pulumi.ResourceOption) (*IdentityProvider, error) {
	var resource IdentityProvider
	err := ctx.ReadResource("konnect:index/identityProvider:IdentityProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityProvider resources.
type identityProviderState struct {
	// **(Optional, String)** Client ID of the identity provider.
	ClientId *string `pulumi:"clientId"`
	// **(Optional, String, Sensitive)** Client secret of the identity provider.
	ClientSecret *string `pulumi:"clientSecret"`
	// **(Optional, String)** Claim to map email for the identity provider.
	EmailClaimMapping *string `pulumi:"emailClaimMapping"`
	// **(Optional, String)** Claim to map groups for the identity provider.
	GroupsClaimMapping *string `pulumi:"groupsClaimMapping"`
	// **(Optional, String)** Issuer of the identity provider.
	Issuer *string `pulumi:"issuer"`
	// **(Optional, String)** Login path of the identity provider.
	LoginPath *string `pulumi:"loginPath"`
	// **(Optional, String)** Claim to map name for the identity provider.
	NameClaimMapping *string `pulumi:"nameClaimMapping"`
	// **(Optional, List of String)** Scopes of the identity provider.
	Scopes []string `pulumi:"scopes"`
}

type IdentityProviderState struct {
	// **(Optional, String)** Client ID of the identity provider.
	ClientId pulumi.StringPtrInput
	// **(Optional, String, Sensitive)** Client secret of the identity provider.
	ClientSecret pulumi.StringPtrInput
	// **(Optional, String)** Claim to map email for the identity provider.
	EmailClaimMapping pulumi.StringPtrInput
	// **(Optional, String)** Claim to map groups for the identity provider.
	GroupsClaimMapping pulumi.StringPtrInput
	// **(Optional, String)** Issuer of the identity provider.
	Issuer pulumi.StringPtrInput
	// **(Optional, String)** Login path of the identity provider.
	LoginPath pulumi.StringPtrInput
	// **(Optional, String)** Claim to map name for the identity provider.
	NameClaimMapping pulumi.StringPtrInput
	// **(Optional, List of String)** Scopes of the identity provider.
	Scopes pulumi.StringArrayInput
}

func (IdentityProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProviderState)(nil)).Elem()
}

type identityProviderArgs struct {
	// **(Optional, String)** Client ID of the identity provider.
	ClientId *string `pulumi:"clientId"`
	// **(Optional, String, Sensitive)** Client secret of the identity provider.
	ClientSecret *string `pulumi:"clientSecret"`
	// **(Optional, String)** Claim to map email for the identity provider.
	EmailClaimMapping *string `pulumi:"emailClaimMapping"`
	// **(Optional, String)** Claim to map groups for the identity provider.
	GroupsClaimMapping *string `pulumi:"groupsClaimMapping"`
	// **(Optional, String)** Issuer of the identity provider.
	Issuer *string `pulumi:"issuer"`
	// **(Optional, String)** Login path of the identity provider.
	LoginPath *string `pulumi:"loginPath"`
	// **(Optional, String)** Claim to map name for the identity provider.
	NameClaimMapping *string `pulumi:"nameClaimMapping"`
	// **(Optional, List of String)** Scopes of the identity provider.
	Scopes []string `pulumi:"scopes"`
}

// The set of arguments for constructing a IdentityProvider resource.
type IdentityProviderArgs struct {
	// **(Optional, String)** Client ID of the identity provider.
	ClientId pulumi.StringPtrInput
	// **(Optional, String, Sensitive)** Client secret of the identity provider.
	ClientSecret pulumi.StringPtrInput
	// **(Optional, String)** Claim to map email for the identity provider.
	EmailClaimMapping pulumi.StringPtrInput
	// **(Optional, String)** Claim to map groups for the identity provider.
	GroupsClaimMapping pulumi.StringPtrInput
	// **(Optional, String)** Issuer of the identity provider.
	Issuer pulumi.StringPtrInput
	// **(Optional, String)** Login path of the identity provider.
	LoginPath pulumi.StringPtrInput
	// **(Optional, String)** Claim to map name for the identity provider.
	NameClaimMapping pulumi.StringPtrInput
	// **(Optional, List of String)** Scopes of the identity provider.
	Scopes pulumi.StringArrayInput
}

func (IdentityProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProviderArgs)(nil)).Elem()
}

type IdentityProviderInput interface {
	pulumi.Input

	ToIdentityProviderOutput() IdentityProviderOutput
	ToIdentityProviderOutputWithContext(ctx context.Context) IdentityProviderOutput
}

func (*IdentityProvider) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProvider)(nil)).Elem()
}

func (i *IdentityProvider) ToIdentityProviderOutput() IdentityProviderOutput {
	return i.ToIdentityProviderOutputWithContext(context.Background())
}

func (i *IdentityProvider) ToIdentityProviderOutputWithContext(ctx context.Context) IdentityProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderOutput)
}

func (i *IdentityProvider) ToOutput(ctx context.Context) pulumix.Output[*IdentityProvider] {
	return pulumix.Output[*IdentityProvider]{
		OutputState: i.ToIdentityProviderOutputWithContext(ctx).OutputState,
	}
}

// IdentityProviderArrayInput is an input type that accepts IdentityProviderArray and IdentityProviderArrayOutput values.
// You can construct a concrete instance of `IdentityProviderArrayInput` via:
//
//	IdentityProviderArray{ IdentityProviderArgs{...} }
type IdentityProviderArrayInput interface {
	pulumi.Input

	ToIdentityProviderArrayOutput() IdentityProviderArrayOutput
	ToIdentityProviderArrayOutputWithContext(context.Context) IdentityProviderArrayOutput
}

type IdentityProviderArray []IdentityProviderInput

func (IdentityProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityProvider)(nil)).Elem()
}

func (i IdentityProviderArray) ToIdentityProviderArrayOutput() IdentityProviderArrayOutput {
	return i.ToIdentityProviderArrayOutputWithContext(context.Background())
}

func (i IdentityProviderArray) ToIdentityProviderArrayOutputWithContext(ctx context.Context) IdentityProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderArrayOutput)
}

func (i IdentityProviderArray) ToOutput(ctx context.Context) pulumix.Output[[]*IdentityProvider] {
	return pulumix.Output[[]*IdentityProvider]{
		OutputState: i.ToIdentityProviderArrayOutputWithContext(ctx).OutputState,
	}
}

// IdentityProviderMapInput is an input type that accepts IdentityProviderMap and IdentityProviderMapOutput values.
// You can construct a concrete instance of `IdentityProviderMapInput` via:
//
//	IdentityProviderMap{ "key": IdentityProviderArgs{...} }
type IdentityProviderMapInput interface {
	pulumi.Input

	ToIdentityProviderMapOutput() IdentityProviderMapOutput
	ToIdentityProviderMapOutputWithContext(context.Context) IdentityProviderMapOutput
}

type IdentityProviderMap map[string]IdentityProviderInput

func (IdentityProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityProvider)(nil)).Elem()
}

func (i IdentityProviderMap) ToIdentityProviderMapOutput() IdentityProviderMapOutput {
	return i.ToIdentityProviderMapOutputWithContext(context.Background())
}

func (i IdentityProviderMap) ToIdentityProviderMapOutputWithContext(ctx context.Context) IdentityProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderMapOutput)
}

func (i IdentityProviderMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*IdentityProvider] {
	return pulumix.Output[map[string]*IdentityProvider]{
		OutputState: i.ToIdentityProviderMapOutputWithContext(ctx).OutputState,
	}
}

type IdentityProviderOutput struct{ *pulumi.OutputState }

func (IdentityProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProvider)(nil)).Elem()
}

func (o IdentityProviderOutput) ToIdentityProviderOutput() IdentityProviderOutput {
	return o
}

func (o IdentityProviderOutput) ToIdentityProviderOutputWithContext(ctx context.Context) IdentityProviderOutput {
	return o
}

func (o IdentityProviderOutput) ToOutput(ctx context.Context) pulumix.Output[*IdentityProvider] {
	return pulumix.Output[*IdentityProvider]{
		OutputState: o.OutputState,
	}
}

// **(Optional, String)** Client ID of the identity provider.
func (o IdentityProviderOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProvider) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// **(Optional, String, Sensitive)** Client secret of the identity provider.
func (o IdentityProviderOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProvider) pulumi.StringPtrOutput { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// **(Optional, String)** Claim to map email for the identity provider.
func (o IdentityProviderOutput) EmailClaimMapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProvider) pulumi.StringPtrOutput { return v.EmailClaimMapping }).(pulumi.StringPtrOutput)
}

// **(Optional, String)** Claim to map groups for the identity provider.
func (o IdentityProviderOutput) GroupsClaimMapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProvider) pulumi.StringPtrOutput { return v.GroupsClaimMapping }).(pulumi.StringPtrOutput)
}

// **(Optional, String)** Issuer of the identity provider.
func (o IdentityProviderOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProvider) pulumi.StringPtrOutput { return v.Issuer }).(pulumi.StringPtrOutput)
}

// **(Optional, String)** Login path of the identity provider.
func (o IdentityProviderOutput) LoginPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProvider) pulumi.StringPtrOutput { return v.LoginPath }).(pulumi.StringPtrOutput)
}

// **(Optional, String)** Claim to map name for the identity provider.
func (o IdentityProviderOutput) NameClaimMapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProvider) pulumi.StringPtrOutput { return v.NameClaimMapping }).(pulumi.StringPtrOutput)
}

// **(Optional, List of String)** Scopes of the identity provider.
func (o IdentityProviderOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdentityProvider) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

type IdentityProviderArrayOutput struct{ *pulumi.OutputState }

func (IdentityProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityProvider)(nil)).Elem()
}

func (o IdentityProviderArrayOutput) ToIdentityProviderArrayOutput() IdentityProviderArrayOutput {
	return o
}

func (o IdentityProviderArrayOutput) ToIdentityProviderArrayOutputWithContext(ctx context.Context) IdentityProviderArrayOutput {
	return o
}

func (o IdentityProviderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*IdentityProvider] {
	return pulumix.Output[[]*IdentityProvider]{
		OutputState: o.OutputState,
	}
}

func (o IdentityProviderArrayOutput) Index(i pulumi.IntInput) IdentityProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityProvider {
		return vs[0].([]*IdentityProvider)[vs[1].(int)]
	}).(IdentityProviderOutput)
}

type IdentityProviderMapOutput struct{ *pulumi.OutputState }

func (IdentityProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityProvider)(nil)).Elem()
}

func (o IdentityProviderMapOutput) ToIdentityProviderMapOutput() IdentityProviderMapOutput {
	return o
}

func (o IdentityProviderMapOutput) ToIdentityProviderMapOutputWithContext(ctx context.Context) IdentityProviderMapOutput {
	return o
}

func (o IdentityProviderMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*IdentityProvider] {
	return pulumix.Output[map[string]*IdentityProvider]{
		OutputState: o.OutputState,
	}
}

func (o IdentityProviderMapOutput) MapIndex(k pulumi.StringInput) IdentityProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityProvider {
		return vs[0].(map[string]*IdentityProvider)[vs[1].(string)]
	}).(IdentityProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProviderInput)(nil)).Elem(), &IdentityProvider{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProviderArrayInput)(nil)).Elem(), IdentityProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProviderMapInput)(nil)).Elem(), IdentityProviderMap{})
	pulumi.RegisterOutputType(IdentityProviderOutput{})
	pulumi.RegisterOutputType(IdentityProviderArrayOutput{})
	pulumi.RegisterOutputType(IdentityProviderMapOutput{})
}
