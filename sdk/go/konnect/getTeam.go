// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents a team
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := konnect.LookupTeam(ctx, &konnect.LookupTeamArgs{
//				SearchName: pulumi.StringRef("Panther"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTeam(ctx *pulumi.Context, args *LookupTeamArgs, opts ...pulumi.InvokeOption) (*LookupTeamResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTeamResult
	err := ctx.Invoke("konnect:index/getTeam:getTeam", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTeam.
type LookupTeamArgs struct {
	// **(Optional, String)** The filter string to apply to the name of the team. Uses equality.
	Name *string `pulumi:"name"`
	// **(Optional, String)** The search string to apply to the name of the team. Uses contains.
	SearchName *string `pulumi:"searchName"`
}

// A collection of values returned by getTeam.
type LookupTeamResult struct {
	// **(String)** The description of the team.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// **(Boolean)** Whether the team is predefined.
	IsPredefined bool    `pulumi:"isPredefined"`
	Name         *string `pulumi:"name"`
	SearchName   *string `pulumi:"searchName"`
}

func LookupTeamOutput(ctx *pulumi.Context, args LookupTeamOutputArgs, opts ...pulumi.InvokeOption) LookupTeamResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTeamResult, error) {
			args := v.(LookupTeamArgs)
			r, err := LookupTeam(ctx, &args, opts...)
			var s LookupTeamResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTeamResultOutput)
}

// A collection of arguments for invoking getTeam.
type LookupTeamOutputArgs struct {
	// **(Optional, String)** The filter string to apply to the name of the team. Uses equality.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// **(Optional, String)** The search string to apply to the name of the team. Uses contains.
	SearchName pulumi.StringPtrInput `pulumi:"searchName"`
}

func (LookupTeamOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeamArgs)(nil)).Elem()
}

// A collection of values returned by getTeam.
type LookupTeamResultOutput struct{ *pulumi.OutputState }

func (LookupTeamResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeamResult)(nil)).Elem()
}

func (o LookupTeamResultOutput) ToLookupTeamResultOutput() LookupTeamResultOutput {
	return o
}

func (o LookupTeamResultOutput) ToLookupTeamResultOutputWithContext(ctx context.Context) LookupTeamResultOutput {
	return o
}

func (o LookupTeamResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupTeamResult] {
	return pulumix.Output[LookupTeamResult]{
		OutputState: o.OutputState,
	}
}

// **(String)** The description of the team.
func (o LookupTeamResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupTeamResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Id }).(pulumi.StringOutput)
}

// **(Boolean)** Whether the team is predefined.
func (o LookupTeamResultOutput) IsPredefined() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTeamResult) bool { return v.IsPredefined }).(pulumi.BoolOutput)
}

func (o LookupTeamResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTeamResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupTeamResultOutput) SearchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTeamResult) *string { return v.SearchName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTeamResultOutput{})
}
