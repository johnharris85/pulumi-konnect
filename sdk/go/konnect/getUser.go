// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents a user
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := konnect.LookupUser(ctx, &konnect.LookupUserArgs{
//				SearchEmail: pulumi.StringRef("@example.com"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("konnect:index/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// **(Optional, Boolean)** The filter flag to apply to the active flag of the user. Uses equality. Default: `true`
	Active *bool `pulumi:"active"`
	// **(Optional, String)** The filter string to apply to the email of the user. Uses equality.
	Email *string `pulumi:"email"`
	// **(Optional, String)** The filter string to apply to the full name of the user. Uses equality.
	FullName *string `pulumi:"fullName"`
	// **(Optional, String)** The search string to apply to the email of the user. Uses contains.
	SearchEmail *string `pulumi:"searchEmail"`
	// **(Optional, String)** The search string to apply to the full name of the user. Uses contains.
	SearchFullName *string `pulumi:"searchFullName"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	Active   *bool   `pulumi:"active"`
	Email    *string `pulumi:"email"`
	FullName *string `pulumi:"fullName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// **(String)** The preferred name of the user.
	PreferredName  string  `pulumi:"preferredName"`
	SearchEmail    *string `pulumi:"searchEmail"`
	SearchFullName *string `pulumi:"searchFullName"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserResult, error) {
			args := v.(LookupUserArgs)
			r, err := LookupUser(ctx, &args, opts...)
			var s LookupUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// **(Optional, Boolean)** The filter flag to apply to the active flag of the user. Uses equality. Default: `true`
	Active pulumi.BoolPtrInput `pulumi:"active"`
	// **(Optional, String)** The filter string to apply to the email of the user. Uses equality.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// **(Optional, String)** The filter string to apply to the full name of the user. Uses equality.
	FullName pulumi.StringPtrInput `pulumi:"fullName"`
	// **(Optional, String)** The search string to apply to the email of the user. Uses contains.
	SearchEmail pulumi.StringPtrInput `pulumi:"searchEmail"`
	// **(Optional, String)** The search string to apply to the full name of the user. Uses contains.
	SearchFullName pulumi.StringPtrInput `pulumi:"searchFullName"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupUserResult] {
	return pulumix.Output[LookupUserResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupUserResultOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

func (o LookupUserResultOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.Email }).(pulumi.StringPtrOutput)
}

func (o LookupUserResultOutput) FullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.FullName }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// **(String)** The preferred name of the user.
func (o LookupUserResultOutput) PreferredName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.PreferredName }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) SearchEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.SearchEmail }).(pulumi.StringPtrOutput)
}

func (o LookupUserResultOutput) SearchFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.SearchFullName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
