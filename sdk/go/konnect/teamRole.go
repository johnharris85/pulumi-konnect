// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/johnharris85/pulumi-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents a role assigned to a team to access a given entity
//
// ## Import
//
// Team roles can be imported using a proper value of `id` as described above
type TeamRole struct {
	pulumi.CustomResourceState

	// **(Required, ForceNew, String)** The id of the entity for which the role applies.
	EntityId pulumi.StringOutput `pulumi:"entityId"`
	// **(Required, ForceNew, String)** The region of the entity for which the role applies.
	EntityRegion pulumi.StringOutput `pulumi:"entityRegion"`
	// **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
	EntityTypeDisplayName pulumi.StringOutput `pulumi:"entityTypeDisplayName"`
	// **(Required, ForceNew, String)** The display name of the role.
	RoleDisplayName pulumi.StringOutput `pulumi:"roleDisplayName"`
	// **(Required, ForceNew, String)** The id of the team assigned the role
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewTeamRole registers a new resource with the given unique name, arguments, and options.
func NewTeamRole(ctx *pulumi.Context,
	name string, args *TeamRoleArgs, opts ...pulumi.ResourceOption) (*TeamRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntityId == nil {
		return nil, errors.New("invalid value for required argument 'EntityId'")
	}
	if args.EntityRegion == nil {
		return nil, errors.New("invalid value for required argument 'EntityRegion'")
	}
	if args.EntityTypeDisplayName == nil {
		return nil, errors.New("invalid value for required argument 'EntityTypeDisplayName'")
	}
	if args.RoleDisplayName == nil {
		return nil, errors.New("invalid value for required argument 'RoleDisplayName'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamRole
	err := ctx.RegisterResource("konnect:index/teamRole:TeamRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamRole gets an existing TeamRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamRoleState, opts ...pulumi.ResourceOption) (*TeamRole, error) {
	var resource TeamRole
	err := ctx.ReadResource("konnect:index/teamRole:TeamRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamRole resources.
type teamRoleState struct {
	// **(Required, ForceNew, String)** The id of the entity for which the role applies.
	EntityId *string `pulumi:"entityId"`
	// **(Required, ForceNew, String)** The region of the entity for which the role applies.
	EntityRegion *string `pulumi:"entityRegion"`
	// **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
	EntityTypeDisplayName *string `pulumi:"entityTypeDisplayName"`
	// **(Required, ForceNew, String)** The display name of the role.
	RoleDisplayName *string `pulumi:"roleDisplayName"`
	// **(Required, ForceNew, String)** The id of the team assigned the role
	TeamId *string `pulumi:"teamId"`
}

type TeamRoleState struct {
	// **(Required, ForceNew, String)** The id of the entity for which the role applies.
	EntityId pulumi.StringPtrInput
	// **(Required, ForceNew, String)** The region of the entity for which the role applies.
	EntityRegion pulumi.StringPtrInput
	// **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
	EntityTypeDisplayName pulumi.StringPtrInput
	// **(Required, ForceNew, String)** The display name of the role.
	RoleDisplayName pulumi.StringPtrInput
	// **(Required, ForceNew, String)** The id of the team assigned the role
	TeamId pulumi.StringPtrInput
}

func (TeamRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamRoleState)(nil)).Elem()
}

type teamRoleArgs struct {
	// **(Required, ForceNew, String)** The id of the entity for which the role applies.
	EntityId string `pulumi:"entityId"`
	// **(Required, ForceNew, String)** The region of the entity for which the role applies.
	EntityRegion string `pulumi:"entityRegion"`
	// **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
	EntityTypeDisplayName string `pulumi:"entityTypeDisplayName"`
	// **(Required, ForceNew, String)** The display name of the role.
	RoleDisplayName string `pulumi:"roleDisplayName"`
	// **(Required, ForceNew, String)** The id of the team assigned the role
	TeamId string `pulumi:"teamId"`
}

// The set of arguments for constructing a TeamRole resource.
type TeamRoleArgs struct {
	// **(Required, ForceNew, String)** The id of the entity for which the role applies.
	EntityId pulumi.StringInput
	// **(Required, ForceNew, String)** The region of the entity for which the role applies.
	EntityRegion pulumi.StringInput
	// **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
	EntityTypeDisplayName pulumi.StringInput
	// **(Required, ForceNew, String)** The display name of the role.
	RoleDisplayName pulumi.StringInput
	// **(Required, ForceNew, String)** The id of the team assigned the role
	TeamId pulumi.StringInput
}

func (TeamRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamRoleArgs)(nil)).Elem()
}

type TeamRoleInput interface {
	pulumi.Input

	ToTeamRoleOutput() TeamRoleOutput
	ToTeamRoleOutputWithContext(ctx context.Context) TeamRoleOutput
}

func (*TeamRole) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamRole)(nil)).Elem()
}

func (i *TeamRole) ToTeamRoleOutput() TeamRoleOutput {
	return i.ToTeamRoleOutputWithContext(context.Background())
}

func (i *TeamRole) ToTeamRoleOutputWithContext(ctx context.Context) TeamRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoleOutput)
}

func (i *TeamRole) ToOutput(ctx context.Context) pulumix.Output[*TeamRole] {
	return pulumix.Output[*TeamRole]{
		OutputState: i.ToTeamRoleOutputWithContext(ctx).OutputState,
	}
}

// TeamRoleArrayInput is an input type that accepts TeamRoleArray and TeamRoleArrayOutput values.
// You can construct a concrete instance of `TeamRoleArrayInput` via:
//
//	TeamRoleArray{ TeamRoleArgs{...} }
type TeamRoleArrayInput interface {
	pulumi.Input

	ToTeamRoleArrayOutput() TeamRoleArrayOutput
	ToTeamRoleArrayOutputWithContext(context.Context) TeamRoleArrayOutput
}

type TeamRoleArray []TeamRoleInput

func (TeamRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamRole)(nil)).Elem()
}

func (i TeamRoleArray) ToTeamRoleArrayOutput() TeamRoleArrayOutput {
	return i.ToTeamRoleArrayOutputWithContext(context.Background())
}

func (i TeamRoleArray) ToTeamRoleArrayOutputWithContext(ctx context.Context) TeamRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoleArrayOutput)
}

func (i TeamRoleArray) ToOutput(ctx context.Context) pulumix.Output[[]*TeamRole] {
	return pulumix.Output[[]*TeamRole]{
		OutputState: i.ToTeamRoleArrayOutputWithContext(ctx).OutputState,
	}
}

// TeamRoleMapInput is an input type that accepts TeamRoleMap and TeamRoleMapOutput values.
// You can construct a concrete instance of `TeamRoleMapInput` via:
//
//	TeamRoleMap{ "key": TeamRoleArgs{...} }
type TeamRoleMapInput interface {
	pulumi.Input

	ToTeamRoleMapOutput() TeamRoleMapOutput
	ToTeamRoleMapOutputWithContext(context.Context) TeamRoleMapOutput
}

type TeamRoleMap map[string]TeamRoleInput

func (TeamRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamRole)(nil)).Elem()
}

func (i TeamRoleMap) ToTeamRoleMapOutput() TeamRoleMapOutput {
	return i.ToTeamRoleMapOutputWithContext(context.Background())
}

func (i TeamRoleMap) ToTeamRoleMapOutputWithContext(ctx context.Context) TeamRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoleMapOutput)
}

func (i TeamRoleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*TeamRole] {
	return pulumix.Output[map[string]*TeamRole]{
		OutputState: i.ToTeamRoleMapOutputWithContext(ctx).OutputState,
	}
}

type TeamRoleOutput struct{ *pulumi.OutputState }

func (TeamRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamRole)(nil)).Elem()
}

func (o TeamRoleOutput) ToTeamRoleOutput() TeamRoleOutput {
	return o
}

func (o TeamRoleOutput) ToTeamRoleOutputWithContext(ctx context.Context) TeamRoleOutput {
	return o
}

func (o TeamRoleOutput) ToOutput(ctx context.Context) pulumix.Output[*TeamRole] {
	return pulumix.Output[*TeamRole]{
		OutputState: o.OutputState,
	}
}

// **(Required, ForceNew, String)** The id of the entity for which the role applies.
func (o TeamRoleOutput) EntityId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamRole) pulumi.StringOutput { return v.EntityId }).(pulumi.StringOutput)
}

// **(Required, ForceNew, String)** The region of the entity for which the role applies.
func (o TeamRoleOutput) EntityRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamRole) pulumi.StringOutput { return v.EntityRegion }).(pulumi.StringOutput)
}

// **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
func (o TeamRoleOutput) EntityTypeDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamRole) pulumi.StringOutput { return v.EntityTypeDisplayName }).(pulumi.StringOutput)
}

// **(Required, ForceNew, String)** The display name of the role.
func (o TeamRoleOutput) RoleDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamRole) pulumi.StringOutput { return v.RoleDisplayName }).(pulumi.StringOutput)
}

// **(Required, ForceNew, String)** The id of the team assigned the role
func (o TeamRoleOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamRole) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type TeamRoleArrayOutput struct{ *pulumi.OutputState }

func (TeamRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamRole)(nil)).Elem()
}

func (o TeamRoleArrayOutput) ToTeamRoleArrayOutput() TeamRoleArrayOutput {
	return o
}

func (o TeamRoleArrayOutput) ToTeamRoleArrayOutputWithContext(ctx context.Context) TeamRoleArrayOutput {
	return o
}

func (o TeamRoleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*TeamRole] {
	return pulumix.Output[[]*TeamRole]{
		OutputState: o.OutputState,
	}
}

func (o TeamRoleArrayOutput) Index(i pulumi.IntInput) TeamRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamRole {
		return vs[0].([]*TeamRole)[vs[1].(int)]
	}).(TeamRoleOutput)
}

type TeamRoleMapOutput struct{ *pulumi.OutputState }

func (TeamRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamRole)(nil)).Elem()
}

func (o TeamRoleMapOutput) ToTeamRoleMapOutput() TeamRoleMapOutput {
	return o
}

func (o TeamRoleMapOutput) ToTeamRoleMapOutputWithContext(ctx context.Context) TeamRoleMapOutput {
	return o
}

func (o TeamRoleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*TeamRole] {
	return pulumix.Output[map[string]*TeamRole]{
		OutputState: o.OutputState,
	}
}

func (o TeamRoleMapOutput) MapIndex(k pulumi.StringInput) TeamRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamRole {
		return vs[0].(map[string]*TeamRole)[vs[1].(string)]
	}).(TeamRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoleInput)(nil)).Elem(), &TeamRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoleArrayInput)(nil)).Elem(), TeamRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoleMapInput)(nil)).Elem(), TeamRoleMap{})
	pulumi.RegisterOutputType(TeamRoleOutput{})
	pulumi.RegisterOutputType(TeamRoleArrayOutput{})
	pulumi.RegisterOutputType(TeamRoleMapOutput{})
}
