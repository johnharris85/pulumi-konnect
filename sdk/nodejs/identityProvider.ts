// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Represents identity provider settings
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as konnect from "@johnharris85/konnect";
 *
 * const example = new konnect.IdentityProvider("example", {
 *     clientId: "XXXX",
 *     clientSecret: "YYYY",
 *     emailClaimMapping: "email",
 *     groupsClaimMapping: "groups",
 *     issuer: "https://example.com",
 *     loginPath: "login",
 *     nameClaimMapping: "name",
 *     scopes: [
 *         "email",
 *         "openid",
 *         "profile",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Identity provider can be imported using a proper value of `id` as described above
 */
export class IdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing IdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityProviderState, opts?: pulumi.CustomResourceOptions): IdentityProvider {
        return new IdentityProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/identityProvider:IdentityProvider';

    /**
     * Returns true if the given object is an instance of IdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityProvider.__pulumiType;
    }

    /**
     * **(Optional, String)** Client ID of the identity provider.
     */
    public readonly clientId!: pulumi.Output<string | undefined>;
    /**
     * **(Optional, String, Sensitive)** Client secret of the identity provider.
     */
    public readonly clientSecret!: pulumi.Output<string | undefined>;
    /**
     * **(Optional, String)** Claim to map email for the identity provider.
     */
    public readonly emailClaimMapping!: pulumi.Output<string | undefined>;
    /**
     * **(Optional, String)** Claim to map groups for the identity provider.
     */
    public readonly groupsClaimMapping!: pulumi.Output<string | undefined>;
    /**
     * **(Optional, String)** Issuer of the identity provider.
     */
    public readonly issuer!: pulumi.Output<string | undefined>;
    /**
     * **(Optional, String)** Login path of the identity provider.
     */
    public readonly loginPath!: pulumi.Output<string | undefined>;
    /**
     * **(Optional, String)** Claim to map name for the identity provider.
     */
    public readonly nameClaimMapping!: pulumi.Output<string | undefined>;
    /**
     * **(Optional, List of String)** Scopes of the identity provider.
     */
    public readonly scopes!: pulumi.Output<string[] | undefined>;

    /**
     * Create a IdentityProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IdentityProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityProviderArgs | IdentityProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityProviderState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["emailClaimMapping"] = state ? state.emailClaimMapping : undefined;
            resourceInputs["groupsClaimMapping"] = state ? state.groupsClaimMapping : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["loginPath"] = state ? state.loginPath : undefined;
            resourceInputs["nameClaimMapping"] = state ? state.nameClaimMapping : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
        } else {
            const args = argsOrState as IdentityProviderArgs | undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["emailClaimMapping"] = args ? args.emailClaimMapping : undefined;
            resourceInputs["groupsClaimMapping"] = args ? args.groupsClaimMapping : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["loginPath"] = args ? args.loginPath : undefined;
            resourceInputs["nameClaimMapping"] = args ? args.nameClaimMapping : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IdentityProvider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IdentityProvider resources.
 */
export interface IdentityProviderState {
    /**
     * **(Optional, String)** Client ID of the identity provider.
     */
    clientId?: pulumi.Input<string>;
    /**
     * **(Optional, String, Sensitive)** Client secret of the identity provider.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * **(Optional, String)** Claim to map email for the identity provider.
     */
    emailClaimMapping?: pulumi.Input<string>;
    /**
     * **(Optional, String)** Claim to map groups for the identity provider.
     */
    groupsClaimMapping?: pulumi.Input<string>;
    /**
     * **(Optional, String)** Issuer of the identity provider.
     */
    issuer?: pulumi.Input<string>;
    /**
     * **(Optional, String)** Login path of the identity provider.
     */
    loginPath?: pulumi.Input<string>;
    /**
     * **(Optional, String)** Claim to map name for the identity provider.
     */
    nameClaimMapping?: pulumi.Input<string>;
    /**
     * **(Optional, List of String)** Scopes of the identity provider.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a IdentityProvider resource.
 */
export interface IdentityProviderArgs {
    /**
     * **(Optional, String)** Client ID of the identity provider.
     */
    clientId?: pulumi.Input<string>;
    /**
     * **(Optional, String, Sensitive)** Client secret of the identity provider.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * **(Optional, String)** Claim to map email for the identity provider.
     */
    emailClaimMapping?: pulumi.Input<string>;
    /**
     * **(Optional, String)** Claim to map groups for the identity provider.
     */
    groupsClaimMapping?: pulumi.Input<string>;
    /**
     * **(Optional, String)** Issuer of the identity provider.
     */
    issuer?: pulumi.Input<string>;
    /**
     * **(Optional, String)** Login path of the identity provider.
     */
    loginPath?: pulumi.Input<string>;
    /**
     * **(Optional, String)** Claim to map name for the identity provider.
     */
    nameClaimMapping?: pulumi.Input<string>;
    /**
     * **(Optional, List of String)** Scopes of the identity provider.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
}
