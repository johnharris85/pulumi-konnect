// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Represents a route within a runtime group
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as konnect from "@johnharris85/konnect";
 * import * as konnect from "@pulumi/konnect";
 *
 * const runtimeGroup = konnect.getRuntimeGroup({
 *     name: "TestRuntimeGroup",
 * });
 * const service = new konnect.Service("service", {
 *     runtimeGroupId: runtimeGroup.then(runtimeGroup => runtimeGroup.id),
 *     host: "mockbin.org",
 * });
 * const example = new konnect.Route("example", {
 *     runtimeGroupId: runtimeGroup.then(runtimeGroup => runtimeGroup.id),
 *     serviceId: service.serviceId,
 *     protocols: ["http"],
 *     paths: ["/example"],
 *     headers: [{
 *         name: "required-header",
 *         values: ["required-header-values"],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Routes can be imported using a proper value of `id` as described above
 */
export class Route extends pulumi.CustomResource {
    /**
     * Get an existing Route resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteState, opts?: pulumi.CustomResourceOptions): Route {
        return new Route(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/route:Route';

    /**
     * Returns true if the given object is an instance of Route.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route.__pulumiType;
    }

    /**
     * **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
     */
    public readonly headers!: pulumi.Output<outputs.RouteHeader[] | undefined>;
    /**
     * **(Optional, List of String)** The hosts this route should allow.
     */
    public readonly hosts!: pulumi.Output<string[] | undefined>;
    /**
     * **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
     */
    public readonly httpsRedirectStatusCode!: pulumi.Output<number | undefined>;
    /**
     * **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
     */
    public readonly methods!: pulumi.Output<string[] | undefined>;
    /**
     * **(Optional, String)** The name of the route.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
     */
    public readonly pathHandling!: pulumi.Output<string | undefined>;
    /**
     * **(Optional, List of String)** The paths this route should allow.
     */
    public readonly paths!: pulumi.Output<string[] | undefined>;
    /**
     * **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
     */
    public readonly preserveHost!: pulumi.Output<boolean | undefined>;
    /**
     * **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `hhtps`
     */
    public readonly protocols!: pulumi.Output<string[] | undefined>;
    /**
     * **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
     */
    public readonly regexPriority!: pulumi.Output<number | undefined>;
    /**
     * **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
     */
    public readonly requestBuffering!: pulumi.Output<boolean | undefined>;
    /**
     * **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
     */
    public readonly responseBuffering!: pulumi.Output<boolean | undefined>;
    /**
     * **(String)** Id of the route alone
     */
    public /*out*/ readonly routeId!: pulumi.Output<string>;
    /**
     * **(Required, String)** The id of the runtime group.
     */
    public readonly runtimeGroupId!: pulumi.Output<string>;
    /**
     * **(Optional, String)** The id of the service to forward traffic to.
     */
    public readonly serviceId!: pulumi.Output<string | undefined>;
    /**
     * **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
     */
    public readonly stripPath!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Route resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteArgs | RouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteState | undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["httpsRedirectStatusCode"] = state ? state.httpsRedirectStatusCode : undefined;
            resourceInputs["methods"] = state ? state.methods : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pathHandling"] = state ? state.pathHandling : undefined;
            resourceInputs["paths"] = state ? state.paths : undefined;
            resourceInputs["preserveHost"] = state ? state.preserveHost : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["regexPriority"] = state ? state.regexPriority : undefined;
            resourceInputs["requestBuffering"] = state ? state.requestBuffering : undefined;
            resourceInputs["responseBuffering"] = state ? state.responseBuffering : undefined;
            resourceInputs["routeId"] = state ? state.routeId : undefined;
            resourceInputs["runtimeGroupId"] = state ? state.runtimeGroupId : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["stripPath"] = state ? state.stripPath : undefined;
        } else {
            const args = argsOrState as RouteArgs | undefined;
            if ((!args || args.runtimeGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtimeGroupId'");
            }
            resourceInputs["headers"] = args ? args.headers : undefined;
            resourceInputs["hosts"] = args ? args.hosts : undefined;
            resourceInputs["httpsRedirectStatusCode"] = args ? args.httpsRedirectStatusCode : undefined;
            resourceInputs["methods"] = args ? args.methods : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pathHandling"] = args ? args.pathHandling : undefined;
            resourceInputs["paths"] = args ? args.paths : undefined;
            resourceInputs["preserveHost"] = args ? args.preserveHost : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["regexPriority"] = args ? args.regexPriority : undefined;
            resourceInputs["requestBuffering"] = args ? args.requestBuffering : undefined;
            resourceInputs["responseBuffering"] = args ? args.responseBuffering : undefined;
            resourceInputs["runtimeGroupId"] = args ? args.runtimeGroupId : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["stripPath"] = args ? args.stripPath : undefined;
            resourceInputs["routeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Route resources.
 */
export interface RouteState {
    /**
     * **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
     */
    headers?: pulumi.Input<pulumi.Input<inputs.RouteHeader>[]>;
    /**
     * **(Optional, List of String)** The hosts this route should allow.
     */
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
     */
    httpsRedirectStatusCode?: pulumi.Input<number>;
    /**
     * **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
     */
    methods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * **(Optional, String)** The name of the route.
     */
    name?: pulumi.Input<string>;
    /**
     * **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
     */
    pathHandling?: pulumi.Input<string>;
    /**
     * **(Optional, List of String)** The paths this route should allow.
     */
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
     */
    preserveHost?: pulumi.Input<boolean>;
    /**
     * **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `hhtps`
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
     */
    regexPriority?: pulumi.Input<number>;
    /**
     * **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
     */
    requestBuffering?: pulumi.Input<boolean>;
    /**
     * **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
     */
    responseBuffering?: pulumi.Input<boolean>;
    /**
     * **(String)** Id of the route alone
     */
    routeId?: pulumi.Input<string>;
    /**
     * **(Required, String)** The id of the runtime group.
     */
    runtimeGroupId?: pulumi.Input<string>;
    /**
     * **(Optional, String)** The id of the service to forward traffic to.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
     */
    stripPath?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Route resource.
 */
export interface RouteArgs {
    /**
     * **(Optional, set{header})** Configuration block for a header.  Can be specified multiple times for each header.  Each block supports the fields documented below.
     */
    headers?: pulumi.Input<pulumi.Input<inputs.RouteHeader>[]>;
    /**
     * **(Optional, List of String)** The hosts this route should allow.
     */
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * **(Optional, Integer)** The status code Kong responds with when all properties of a Route match except the protocol. Allowed values: `426`, `301`, `302`, `307`, `308`. Default: `426`
     */
    httpsRedirectStatusCode?: pulumi.Input<number>;
    /**
     * **(Optional, List of String)** The methods this route should allow. Allowed values: `GET`, `PUT`, `POST`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`
     */
    methods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * **(Optional, String)** The name of the route.
     */
    name?: pulumi.Input<string>;
    /**
     * **(Optional, String)** Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. Allowed values: `v0`, `v1`. Default: `v0`
     */
    pathHandling?: pulumi.Input<string>;
    /**
     * **(Optional, List of String)** The paths this route should allow.
     */
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * **(Optional, Boolean)** Whether to use the request `Host` header during the Service request. Default: `false`
     */
    preserveHost?: pulumi.Input<boolean>;
    /**
     * **(Optional, List of String)** The protocols this route should allow. Allowed values: `http`, `hhtps`
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * **(Optional, Integer)** A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. Default: `0`
     */
    regexPriority?: pulumi.Input<number>;
    /**
     * **(Optional, Boolean)** Whether to enable request body buffering. Default: `true`
     */
    requestBuffering?: pulumi.Input<boolean>;
    /**
     * **(Optional, Boolean)** Whether to enable response body buffering. Default: `true`
     */
    responseBuffering?: pulumi.Input<boolean>;
    /**
     * **(Required, String)** The id of the runtime group.
     */
    runtimeGroupId: pulumi.Input<string>;
    /**
     * **(Optional, String)** The id of the service to forward traffic to.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * **(Optional, Boolean)** Whether to strip the matching prefix from the Service request. Default: `true`
     */
    stripPath?: pulumi.Input<boolean>;
}
