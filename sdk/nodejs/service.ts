// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Represents a service within a runtime group
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as konnect from "@johnharris85/konnect";
 * import * as konnect from "@pulumi/konnect";
 *
 * const runtimeGroup = konnect.getRuntimeGroup({
 *     name: "TestRuntimeGroup",
 * });
 * const example = new konnect.Service("example", {
 *     runtimeGroupId: runtimeGroup.then(runtimeGroup => runtimeGroup.id),
 *     host: "mockbin.org",
 * });
 * ```
 *
 * ## Import
 *
 * Services can be imported using a proper value of `id` as described above
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * **(Optional, Integer)** The timeout in milliseconds for establishing a connection to the host. Default: `60000`
     */
    public readonly connectTimeout!: pulumi.Output<number | undefined>;
    /**
     * **(Optional, Boolean)** Whether the service is active. Default: `true`
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * **(Required, String)** The host of the service.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * **(Optional, String)** The name of the service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * **(Optional, String)** The path to be used in requests to the host.
     */
    public readonly path!: pulumi.Output<string | undefined>;
    /**
     * **(Optional, Integer)** The port used to communicate with the host. Default: `80`
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * **(Optional, String)** The protocol used to communicate with the host. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * **(Optional, Integer)** The timeout in milliseconds between two successive read operations for transmitting a request to the host. Default: `60000`
     */
    public readonly readTimeout!: pulumi.Output<number | undefined>;
    /**
     * **(Optional, Integer)** The number of retries to execute upon failure to proxy. Default: `5`
     */
    public readonly retries!: pulumi.Output<number | undefined>;
    /**
     * **(Required, String)** The id of the runtime group.
     */
    public readonly runtimeGroupId!: pulumi.Output<string>;
    /**
     * **(String)** Id of the service alone
     */
    public /*out*/ readonly serviceId!: pulumi.Output<string>;
    /**
     * **(Optional, Integer)** The timeout in milliseconds between two successive write operations for transmitting a request to the host. Default: `60000`
     */
    public readonly writeTimeout!: pulumi.Output<number | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["connectTimeout"] = state ? state.connectTimeout : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["readTimeout"] = state ? state.readTimeout : undefined;
            resourceInputs["retries"] = state ? state.retries : undefined;
            resourceInputs["runtimeGroupId"] = state ? state.runtimeGroupId : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["writeTimeout"] = state ? state.writeTimeout : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.runtimeGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtimeGroupId'");
            }
            resourceInputs["connectTimeout"] = args ? args.connectTimeout : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["readTimeout"] = args ? args.readTimeout : undefined;
            resourceInputs["retries"] = args ? args.retries : undefined;
            resourceInputs["runtimeGroupId"] = args ? args.runtimeGroupId : undefined;
            resourceInputs["writeTimeout"] = args ? args.writeTimeout : undefined;
            resourceInputs["serviceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * **(Optional, Integer)** The timeout in milliseconds for establishing a connection to the host. Default: `60000`
     */
    connectTimeout?: pulumi.Input<number>;
    /**
     * **(Optional, Boolean)** Whether the service is active. Default: `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * **(Required, String)** The host of the service.
     */
    host?: pulumi.Input<string>;
    /**
     * **(Optional, String)** The name of the service.
     */
    name?: pulumi.Input<string>;
    /**
     * **(Optional, String)** The path to be used in requests to the host.
     */
    path?: pulumi.Input<string>;
    /**
     * **(Optional, Integer)** The port used to communicate with the host. Default: `80`
     */
    port?: pulumi.Input<number>;
    /**
     * **(Optional, String)** The protocol used to communicate with the host. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
     */
    protocol?: pulumi.Input<string>;
    /**
     * **(Optional, Integer)** The timeout in milliseconds between two successive read operations for transmitting a request to the host. Default: `60000`
     */
    readTimeout?: pulumi.Input<number>;
    /**
     * **(Optional, Integer)** The number of retries to execute upon failure to proxy. Default: `5`
     */
    retries?: pulumi.Input<number>;
    /**
     * **(Required, String)** The id of the runtime group.
     */
    runtimeGroupId?: pulumi.Input<string>;
    /**
     * **(String)** Id of the service alone
     */
    serviceId?: pulumi.Input<string>;
    /**
     * **(Optional, Integer)** The timeout in milliseconds between two successive write operations for transmitting a request to the host. Default: `60000`
     */
    writeTimeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * **(Optional, Integer)** The timeout in milliseconds for establishing a connection to the host. Default: `60000`
     */
    connectTimeout?: pulumi.Input<number>;
    /**
     * **(Optional, Boolean)** Whether the service is active. Default: `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * **(Required, String)** The host of the service.
     */
    host: pulumi.Input<string>;
    /**
     * **(Optional, String)** The name of the service.
     */
    name?: pulumi.Input<string>;
    /**
     * **(Optional, String)** The path to be used in requests to the host.
     */
    path?: pulumi.Input<string>;
    /**
     * **(Optional, Integer)** The port used to communicate with the host. Default: `80`
     */
    port?: pulumi.Input<number>;
    /**
     * **(Optional, String)** The protocol used to communicate with the host. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
     */
    protocol?: pulumi.Input<string>;
    /**
     * **(Optional, Integer)** The timeout in milliseconds between two successive read operations for transmitting a request to the host. Default: `60000`
     */
    readTimeout?: pulumi.Input<number>;
    /**
     * **(Optional, Integer)** The number of retries to execute upon failure to proxy. Default: `5`
     */
    retries?: pulumi.Input<number>;
    /**
     * **(Required, String)** The id of the runtime group.
     */
    runtimeGroupId: pulumi.Input<string>;
    /**
     * **(Optional, Integer)** The timeout in milliseconds between two successive write operations for transmitting a request to the host. Default: `60000`
     */
    writeTimeout?: pulumi.Input<number>;
}
