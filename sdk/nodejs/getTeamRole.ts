// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Represents a role assigned to a team
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as konnect from "@pulumi/konnect";
 *
 * const team = konnect.getTeam({
 *     name: "runtime-admin",
 * });
 * const example = team.then(team => konnect.getTeamRole({
 *     teamId: team.id,
 *     entityTypeDisplayName: "Runtime Groups",
 * }));
 * ```
 */
export function getTeamRole(args: GetTeamRoleArgs, opts?: pulumi.InvokeOptions): Promise<GetTeamRoleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("konnect:index/getTeamRole:getTeamRole", {
        "entityTypeDisplayName": args.entityTypeDisplayName,
        "roleDisplayName": args.roleDisplayName,
        "searchEntityTypeDisplayName": args.searchEntityTypeDisplayName,
        "searchRoleDisplayName": args.searchRoleDisplayName,
        "teamId": args.teamId,
    }, opts);
}

/**
 * A collection of arguments for invoking getTeamRole.
 */
export interface GetTeamRoleArgs {
    /**
     * **(Optional, String)** The filter string to apply to the display name of the entity type. Must be `Runtime Groups` or `Services`. Uses equality.
     */
    entityTypeDisplayName?: string;
    /**
     * **(Optional, String)** The filter string to apply to the display name of the role. Uses equality.
     */
    roleDisplayName?: string;
    /**
     * **(Optional, String)** The search string to apply to the display name of the entity type, like `Runtime Groups` or `Services`. Uses contains.
     */
    searchEntityTypeDisplayName?: string;
    /**
     * **(Optional, String)** The search string to apply to the display name of the role. Uses contains.
     */
    searchRoleDisplayName?: string;
    /**
     * **(Required, String)** The id of the team assigned the role
     */
    teamId: string;
}

/**
 * A collection of values returned by getTeamRole.
 */
export interface GetTeamRoleResult {
    /**
     * **(String)** The id of the entity for which the role applies.
     */
    readonly entityId: string;
    /**
     * **(String)** The region of the entity for which the role applies.
     */
    readonly entityRegion: string;
    readonly entityTypeDisplayName?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly roleDisplayName?: string;
    readonly searchEntityTypeDisplayName?: string;
    readonly searchRoleDisplayName?: string;
    readonly teamId: string;
}
/**
 * Represents a role assigned to a team
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as konnect from "@pulumi/konnect";
 *
 * const team = konnect.getTeam({
 *     name: "runtime-admin",
 * });
 * const example = team.then(team => konnect.getTeamRole({
 *     teamId: team.id,
 *     entityTypeDisplayName: "Runtime Groups",
 * }));
 * ```
 */
export function getTeamRoleOutput(args: GetTeamRoleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTeamRoleResult> {
    return pulumi.output(args).apply((a: any) => getTeamRole(a, opts))
}

/**
 * A collection of arguments for invoking getTeamRole.
 */
export interface GetTeamRoleOutputArgs {
    /**
     * **(Optional, String)** The filter string to apply to the display name of the entity type. Must be `Runtime Groups` or `Services`. Uses equality.
     */
    entityTypeDisplayName?: pulumi.Input<string>;
    /**
     * **(Optional, String)** The filter string to apply to the display name of the role. Uses equality.
     */
    roleDisplayName?: pulumi.Input<string>;
    /**
     * **(Optional, String)** The search string to apply to the display name of the entity type, like `Runtime Groups` or `Services`. Uses contains.
     */
    searchEntityTypeDisplayName?: pulumi.Input<string>;
    /**
     * **(Optional, String)** The search string to apply to the display name of the role. Uses contains.
     */
    searchRoleDisplayName?: pulumi.Input<string>;
    /**
     * **(Required, String)** The id of the team assigned the role
     */
    teamId: pulumi.Input<string>;
}
