// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Represents a member of a team
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as konnect from "@johnharris85/konnect";
 * import * as konnect from "@pulumi/konnect";
 *
 * const team = new konnect.Team("team", {description: "testing"});
 * const user = konnect.getUser({
 *     searchFullName: "Joe",
 * });
 * const example = new konnect.TeamUser("example", {
 *     teamId: team.id,
 *     userId: user.then(user => user.id),
 * });
 * ```
 *
 * ## Import
 *
 * Team users can be imported using a proper value of `id` as described above
 */
export class TeamUser extends pulumi.CustomResource {
    /**
     * Get an existing TeamUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamUserState, opts?: pulumi.CustomResourceOptions): TeamUser {
        return new TeamUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/teamUser:TeamUser';

    /**
     * Returns true if the given object is an instance of TeamUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamUser.__pulumiType;
    }

    /**
     * **(Required, ForceNew, String)** The id of the team.
     */
    public readonly teamId!: pulumi.Output<string>;
    /**
     * **(Required, ForceNew, String)** The id of the user.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a TeamUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamUserArgs | TeamUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamUserState | undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as TeamUserArgs | undefined;
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TeamUser resources.
 */
export interface TeamUserState {
    /**
     * **(Required, ForceNew, String)** The id of the team.
     */
    teamId?: pulumi.Input<string>;
    /**
     * **(Required, ForceNew, String)** The id of the user.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TeamUser resource.
 */
export interface TeamUserArgs {
    /**
     * **(Required, ForceNew, String)** The id of the team.
     */
    teamId: pulumi.Input<string>;
    /**
     * **(Required, ForceNew, String)** The id of the user.
     */
    userId: pulumi.Input<string>;
}
