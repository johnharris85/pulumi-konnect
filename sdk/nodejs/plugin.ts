// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Represents a plugin within a runtime group
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as konnect from "@johnharris85/konnect";
 * import * as konnect from "@pulumi/konnect";
 *
 * const runtimeGroup = konnect.getRuntimeGroup({
 *     name: "TestRuntimeGroup",
 * });
 * const example = new konnect.Plugin("example", {
 *     runtimeGroupId: runtimeGroup.then(runtimeGroup => runtimeGroup.id),
 *     configJson: `{
 *   "minute": 5
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * Plugins can be imported using a proper value of `id` as described above
 */
export class Plugin extends pulumi.CustomResource {
    /**
     * Get an existing Plugin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PluginState, opts?: pulumi.CustomResourceOptions): Plugin {
        return new Plugin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/plugin:Plugin';

    /**
     * Returns true if the given object is an instance of Plugin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Plugin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Plugin.__pulumiType;
    }

    /**
     * **(JSON)** The full configuration properties for the plugin, including all properties with their default values not specified in `config`.
     */
    public /*out*/ readonly configAllJson!: pulumi.Output<string>;
    /**
     * **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
     */
    public readonly configJson!: pulumi.Output<string | undefined>;
    /**
     * **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
     */
    public readonly consumerId!: pulumi.Output<string | undefined>;
    /**
     * **(Optional, Boolean)** Whether the plugin is active. Default: `true`
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * **(Optional, String)** The instance name of the plugin. Default: `-`
     */
    public readonly instanceName!: pulumi.Output<string | undefined>;
    /**
     * **(Required, String)** The name of the plugin which must match a valid installed plugin.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * **(String)** Id of the plugin alone
     */
    public /*out*/ readonly pluginId!: pulumi.Output<string>;
    /**
     * **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
     */
    public readonly protocols!: pulumi.Output<string[] | undefined>;
    /**
     * **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
     */
    public readonly routeId!: pulumi.Output<string | undefined>;
    /**
     * **(Required, String)** The id of the runtime group.
     */
    public readonly runtimeGroupId!: pulumi.Output<string>;
    /**
     * **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
     */
    public readonly serviceId!: pulumi.Output<string | undefined>;

    /**
     * Create a Plugin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PluginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PluginArgs | PluginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PluginState | undefined;
            resourceInputs["configAllJson"] = state ? state.configAllJson : undefined;
            resourceInputs["configJson"] = state ? state.configJson : undefined;
            resourceInputs["consumerId"] = state ? state.consumerId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pluginId"] = state ? state.pluginId : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["routeId"] = state ? state.routeId : undefined;
            resourceInputs["runtimeGroupId"] = state ? state.runtimeGroupId : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
        } else {
            const args = argsOrState as PluginArgs | undefined;
            if ((!args || args.runtimeGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtimeGroupId'");
            }
            resourceInputs["configJson"] = args ? args.configJson : undefined;
            resourceInputs["consumerId"] = args ? args.consumerId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["routeId"] = args ? args.routeId : undefined;
            resourceInputs["runtimeGroupId"] = args ? args.runtimeGroupId : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["configAllJson"] = undefined /*out*/;
            resourceInputs["pluginId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Plugin.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Plugin resources.
 */
export interface PluginState {
    /**
     * **(JSON)** The full configuration properties for the plugin, including all properties with their default values not specified in `config`.
     */
    configAllJson?: pulumi.Input<string>;
    /**
     * **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
     */
    configJson?: pulumi.Input<string>;
    /**
     * **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
     */
    consumerId?: pulumi.Input<string>;
    /**
     * **(Optional, Boolean)** Whether the plugin is active. Default: `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * **(Optional, String)** The instance name of the plugin. Default: `-`
     */
    instanceName?: pulumi.Input<string>;
    /**
     * **(Required, String)** The name of the plugin which must match a valid installed plugin.
     */
    name?: pulumi.Input<string>;
    /**
     * **(String)** Id of the plugin alone
     */
    pluginId?: pulumi.Input<string>;
    /**
     * **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
     */
    routeId?: pulumi.Input<string>;
    /**
     * **(Required, String)** The id of the runtime group.
     */
    runtimeGroupId?: pulumi.Input<string>;
    /**
     * **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
     */
    serviceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Plugin resource.
 */
export interface PluginArgs {
    /**
     * **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
     */
    configJson?: pulumi.Input<string>;
    /**
     * **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
     */
    consumerId?: pulumi.Input<string>;
    /**
     * **(Optional, Boolean)** Whether the plugin is active. Default: `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * **(Optional, String)** The instance name of the plugin. Default: `-`
     */
    instanceName?: pulumi.Input<string>;
    /**
     * **(Required, String)** The name of the plugin which must match a valid installed plugin.
     */
    name?: pulumi.Input<string>;
    /**
     * **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tlsPassthrough`, `udp`, `ws`, `wss`
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
     */
    routeId?: pulumi.Input<string>;
    /**
     * **(Required, String)** The id of the runtime group.
     */
    runtimeGroupId: pulumi.Input<string>;
    /**
     * **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
     */
    serviceId?: pulumi.Input<string>;
}
