// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace johnharris85.Konnect
{
    public static class GetUser
    {
        /// <summary>
        /// Represents a user
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Konnect = Pulumi.Konnect;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Konnect.GetUser.Invoke(new()
        ///     {
        ///         SearchEmail = "@example.com",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("konnect:index/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// Represents a user
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Konnect = Pulumi.Konnect;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Konnect.GetUser.Invoke(new()
        ///     {
        ///         SearchEmail = "@example.com",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("konnect:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// **(Optional, Boolean)** The filter flag to apply to the active flag of the user. Uses equality. Default: `true`
        /// </summary>
        [Input("active")]
        public bool? Active { get; set; }

        /// <summary>
        /// **(Optional, String)** The filter string to apply to the email of the user. Uses equality.
        /// </summary>
        [Input("email")]
        public string? Email { get; set; }

        /// <summary>
        /// **(Optional, String)** The filter string to apply to the full name of the user. Uses equality.
        /// </summary>
        [Input("fullName")]
        public string? FullName { get; set; }

        /// <summary>
        /// **(Optional, String)** The search string to apply to the email of the user. Uses contains.
        /// </summary>
        [Input("searchEmail")]
        public string? SearchEmail { get; set; }

        /// <summary>
        /// **(Optional, String)** The search string to apply to the full name of the user. Uses contains.
        /// </summary>
        [Input("searchFullName")]
        public string? SearchFullName { get; set; }

        public GetUserArgs()
        {
        }
        public static new GetUserArgs Empty => new GetUserArgs();
    }

    public sealed class GetUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// **(Optional, Boolean)** The filter flag to apply to the active flag of the user. Uses equality. Default: `true`
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// **(Optional, String)** The filter string to apply to the email of the user. Uses equality.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// **(Optional, String)** The filter string to apply to the full name of the user. Uses equality.
        /// </summary>
        [Input("fullName")]
        public Input<string>? FullName { get; set; }

        /// <summary>
        /// **(Optional, String)** The search string to apply to the email of the user. Uses contains.
        /// </summary>
        [Input("searchEmail")]
        public Input<string>? SearchEmail { get; set; }

        /// <summary>
        /// **(Optional, String)** The search string to apply to the full name of the user. Uses contains.
        /// </summary>
        [Input("searchFullName")]
        public Input<string>? SearchFullName { get; set; }

        public GetUserInvokeArgs()
        {
        }
        public static new GetUserInvokeArgs Empty => new GetUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserResult
    {
        public readonly bool? Active;
        public readonly string? Email;
        public readonly string? FullName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// **(String)** The preferred name of the user.
        /// </summary>
        public readonly string PreferredName;
        public readonly string? SearchEmail;
        public readonly string? SearchFullName;

        [OutputConstructor]
        private GetUserResult(
            bool? active,

            string? email,

            string? fullName,

            string id,

            string preferredName,

            string? searchEmail,

            string? searchFullName)
        {
            Active = active;
            Email = email;
            FullName = fullName;
            Id = id;
            PreferredName = preferredName;
            SearchEmail = searchEmail;
            SearchFullName = searchFullName;
        }
    }
}
