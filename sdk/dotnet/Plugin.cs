// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace johnharris85.Konnect
{
    /// <summary>
    /// Represents a plugin within a runtime group
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Konnect = Pulumi.Konnect;
    /// using Konnect = johnharris85.Konnect;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var runtimeGroup = Konnect.GetRuntimeGroup.Invoke(new()
    ///     {
    ///         Name = "TestRuntimeGroup",
    ///     });
    /// 
    ///     var example = new Konnect.Plugin("example", new()
    ///     {
    ///         RuntimeGroupId = runtimeGroup.Apply(getRuntimeGroupResult =&gt; getRuntimeGroupResult.Id),
    ///         ConfigJson = @"{
    ///   ""minute"": 5
    /// }
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Plugins can be imported using a proper value of `id` as described above
    /// </summary>
    [KonnectResourceType("konnect:index/plugin:Plugin")]
    public partial class Plugin : global::Pulumi.CustomResource
    {
        /// <summary>
        /// **(JSON)** The full configuration properties for the plugin, including all properties with their default values not specified in `config`.
        /// </summary>
        [Output("configAllJson")]
        public Output<string> ConfigAllJson { get; private set; } = null!;

        /// <summary>
        /// **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
        /// </summary>
        [Output("configJson")]
        public Output<string?> ConfigJson { get; private set; } = null!;

        /// <summary>
        /// **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
        /// </summary>
        [Output("consumerId")]
        public Output<string?> ConsumerId { get; private set; } = null!;

        /// <summary>
        /// **(Optional, Boolean)** Whether the plugin is active. Default: `true`
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// **(Optional, String)** The instance name of the plugin. Default: `-`
        /// </summary>
        [Output("instanceName")]
        public Output<string?> InstanceName { get; private set; } = null!;

        /// <summary>
        /// **(Required, String)** The name of the plugin which must match a valid installed plugin.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// **(String)** Id of the plugin alone
        /// </summary>
        [Output("pluginId")]
        public Output<string> PluginId { get; private set; } = null!;

        /// <summary>
        /// **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tls_passthrough`, `udp`, `ws`, `wss`
        /// </summary>
        [Output("protocols")]
        public Output<ImmutableArray<string>> Protocols { get; private set; } = null!;

        /// <summary>
        /// **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
        /// </summary>
        [Output("routeId")]
        public Output<string?> RouteId { get; private set; } = null!;

        /// <summary>
        /// **(Required, String)** The id of the runtime group.
        /// </summary>
        [Output("runtimeGroupId")]
        public Output<string> RuntimeGroupId { get; private set; } = null!;

        /// <summary>
        /// **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
        /// </summary>
        [Output("serviceId")]
        public Output<string?> ServiceId { get; private set; } = null!;


        /// <summary>
        /// Create a Plugin resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Plugin(string name, PluginArgs args, CustomResourceOptions? options = null)
            : base("konnect:index/plugin:Plugin", name, args ?? new PluginArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Plugin(string name, Input<string> id, PluginState? state = null, CustomResourceOptions? options = null)
            : base("konnect:index/plugin:Plugin", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/johnharris85/pulumi-konnect",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Plugin resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Plugin Get(string name, Input<string> id, PluginState? state = null, CustomResourceOptions? options = null)
        {
            return new Plugin(name, id, state, options);
        }
    }

    public sealed class PluginArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
        /// </summary>
        [Input("configJson")]
        public Input<string>? ConfigJson { get; set; }

        /// <summary>
        /// **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
        /// </summary>
        [Input("consumerId")]
        public Input<string>? ConsumerId { get; set; }

        /// <summary>
        /// **(Optional, Boolean)** Whether the plugin is active. Default: `true`
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// **(Optional, String)** The instance name of the plugin. Default: `-`
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// **(Required, String)** The name of the plugin which must match a valid installed plugin.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tls_passthrough`, `udp`, `ws`, `wss`
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
        /// </summary>
        [Input("routeId")]
        public Input<string>? RouteId { get; set; }

        /// <summary>
        /// **(Required, String)** The id of the runtime group.
        /// </summary>
        [Input("runtimeGroupId", required: true)]
        public Input<string> RuntimeGroupId { get; set; } = null!;

        /// <summary>
        /// **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        public PluginArgs()
        {
        }
        public static new PluginArgs Empty => new PluginArgs();
    }

    public sealed class PluginState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// **(JSON)** The full configuration properties for the plugin, including all properties with their default values not specified in `config`.
        /// </summary>
        [Input("configAllJson")]
        public Input<string>? ConfigAllJson { get; set; }

        /// <summary>
        /// **(Optional, JSON)** The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Plugin Hub](https://docs.konghq.com/hub/)
        /// </summary>
        [Input("configJson")]
        public Input<string>? ConfigJson { get; set; }

        /// <summary>
        /// **(Optional, String)** If set, the plugin will activate only for requests where the specified consumer has been authenticated.
        /// </summary>
        [Input("consumerId")]
        public Input<string>? ConsumerId { get; set; }

        /// <summary>
        /// **(Optional, Boolean)** Whether the plugin is active. Default: `true`
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// **(Optional, String)** The instance name of the plugin. Default: `-`
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// **(Required, String)** The name of the plugin which must match a valid installed plugin.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// **(String)** Id of the plugin alone
        /// </summary>
        [Input("pluginId")]
        public Input<string>? PluginId { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// **(Optional, List of String)** A list of the request protocols that will trigger this plugin. Allowed values: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`, `tls_passthrough`, `udp`, `ws`, `wss`
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// **(Optional, String)** If set, the plugin will only activate when receiving requests via the specified route.
        /// </summary>
        [Input("routeId")]
        public Input<string>? RouteId { get; set; }

        /// <summary>
        /// **(Required, String)** The id of the runtime group.
        /// </summary>
        [Input("runtimeGroupId")]
        public Input<string>? RuntimeGroupId { get; set; }

        /// <summary>
        /// **(Optional, String)** If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        public PluginState()
        {
        }
        public static new PluginState Empty => new PluginState();
    }
}
