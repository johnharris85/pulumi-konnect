// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace johnharris85.Konnect
{
    /// <summary>
    /// Represents a role assigned to a team to access a given entity
    /// 
    /// ## Import
    /// 
    /// Team roles can be imported using a proper value of `id` as described above
    /// </summary>
    [KonnectResourceType("konnect:index/teamRole:TeamRole")]
    public partial class TeamRole : global::Pulumi.CustomResource
    {
        /// <summary>
        /// **(Required, ForceNew, String)** The id of the entity for which the role applies.
        /// </summary>
        [Output("entityId")]
        public Output<string> EntityId { get; private set; } = null!;

        /// <summary>
        /// **(Required, ForceNew, String)** The region of the entity for which the role applies.
        /// </summary>
        [Output("entityRegion")]
        public Output<string> EntityRegion { get; private set; } = null!;

        /// <summary>
        /// **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
        /// </summary>
        [Output("entityTypeDisplayName")]
        public Output<string> EntityTypeDisplayName { get; private set; } = null!;

        /// <summary>
        /// **(Required, ForceNew, String)** The display name of the role.
        /// </summary>
        [Output("roleDisplayName")]
        public Output<string> RoleDisplayName { get; private set; } = null!;

        /// <summary>
        /// **(Required, ForceNew, String)** The id of the team assigned the role
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;


        /// <summary>
        /// Create a TeamRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TeamRole(string name, TeamRoleArgs args, CustomResourceOptions? options = null)
            : base("konnect:index/teamRole:TeamRole", name, args ?? new TeamRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TeamRole(string name, Input<string> id, TeamRoleState? state = null, CustomResourceOptions? options = null)
            : base("konnect:index/teamRole:TeamRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/johnharris85/pulumi-konnect",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TeamRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TeamRole Get(string name, Input<string> id, TeamRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new TeamRole(name, id, state, options);
        }
    }

    public sealed class TeamRoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// **(Required, ForceNew, String)** The id of the entity for which the role applies.
        /// </summary>
        [Input("entityId", required: true)]
        public Input<string> EntityId { get; set; } = null!;

        /// <summary>
        /// **(Required, ForceNew, String)** The region of the entity for which the role applies.
        /// </summary>
        [Input("entityRegion", required: true)]
        public Input<string> EntityRegion { get; set; } = null!;

        /// <summary>
        /// **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
        /// </summary>
        [Input("entityTypeDisplayName", required: true)]
        public Input<string> EntityTypeDisplayName { get; set; } = null!;

        /// <summary>
        /// **(Required, ForceNew, String)** The display name of the role.
        /// </summary>
        [Input("roleDisplayName", required: true)]
        public Input<string> RoleDisplayName { get; set; } = null!;

        /// <summary>
        /// **(Required, ForceNew, String)** The id of the team assigned the role
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        public TeamRoleArgs()
        {
        }
        public static new TeamRoleArgs Empty => new TeamRoleArgs();
    }

    public sealed class TeamRoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// **(Required, ForceNew, String)** The id of the entity for which the role applies.
        /// </summary>
        [Input("entityId")]
        public Input<string>? EntityId { get; set; }

        /// <summary>
        /// **(Required, ForceNew, String)** The region of the entity for which the role applies.
        /// </summary>
        [Input("entityRegion")]
        public Input<string>? EntityRegion { get; set; }

        /// <summary>
        /// **(Required, ForceNew, String)** The display name of the entity type, like `Runtime Groups` or `Services`.
        /// </summary>
        [Input("entityTypeDisplayName")]
        public Input<string>? EntityTypeDisplayName { get; set; }

        /// <summary>
        /// **(Required, ForceNew, String)** The display name of the role.
        /// </summary>
        [Input("roleDisplayName")]
        public Input<string>? RoleDisplayName { get; set; }

        /// <summary>
        /// **(Required, ForceNew, String)** The id of the team assigned the role
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public TeamRoleState()
        {
        }
        public static new TeamRoleState Empty => new TeamRoleState();
    }
}
