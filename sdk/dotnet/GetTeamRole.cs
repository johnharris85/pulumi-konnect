// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace johnharris85.Konnect
{
    public static class GetTeamRole
    {
        /// <summary>
        /// Represents a role assigned to a team
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Konnect = Pulumi.Konnect;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var team = Konnect.GetTeam.Invoke(new()
        ///     {
        ///         Name = "runtime-admin",
        ///     });
        /// 
        ///     var example = Konnect.GetTeamRole.Invoke(new()
        ///     {
        ///         TeamId = team.Apply(getTeamResult =&gt; getTeamResult.Id),
        ///         EntityTypeDisplayName = "Runtime Groups",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTeamRoleResult> InvokeAsync(GetTeamRoleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTeamRoleResult>("konnect:index/getTeamRole:getTeamRole", args ?? new GetTeamRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Represents a role assigned to a team
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Konnect = Pulumi.Konnect;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var team = Konnect.GetTeam.Invoke(new()
        ///     {
        ///         Name = "runtime-admin",
        ///     });
        /// 
        ///     var example = Konnect.GetTeamRole.Invoke(new()
        ///     {
        ///         TeamId = team.Apply(getTeamResult =&gt; getTeamResult.Id),
        ///         EntityTypeDisplayName = "Runtime Groups",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTeamRoleResult> Invoke(GetTeamRoleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTeamRoleResult>("konnect:index/getTeamRole:getTeamRole", args ?? new GetTeamRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTeamRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// **(Optional, String)** The filter string to apply to the display name of the entity type. Must be `Runtime Groups` or `Services`. Uses equality.
        /// </summary>
        [Input("entityTypeDisplayName")]
        public string? EntityTypeDisplayName { get; set; }

        /// <summary>
        /// **(Optional, String)** The filter string to apply to the display name of the role. Uses equality.
        /// </summary>
        [Input("roleDisplayName")]
        public string? RoleDisplayName { get; set; }

        /// <summary>
        /// **(Optional, String)** The search string to apply to the display name of the entity type, like `Runtime Groups` or `Services`. Uses contains.
        /// </summary>
        [Input("searchEntityTypeDisplayName")]
        public string? SearchEntityTypeDisplayName { get; set; }

        /// <summary>
        /// **(Optional, String)** The search string to apply to the display name of the role. Uses contains.
        /// </summary>
        [Input("searchRoleDisplayName")]
        public string? SearchRoleDisplayName { get; set; }

        /// <summary>
        /// **(Required, String)** The id of the team assigned the role
        /// </summary>
        [Input("teamId", required: true)]
        public string TeamId { get; set; } = null!;

        public GetTeamRoleArgs()
        {
        }
        public static new GetTeamRoleArgs Empty => new GetTeamRoleArgs();
    }

    public sealed class GetTeamRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// **(Optional, String)** The filter string to apply to the display name of the entity type. Must be `Runtime Groups` or `Services`. Uses equality.
        /// </summary>
        [Input("entityTypeDisplayName")]
        public Input<string>? EntityTypeDisplayName { get; set; }

        /// <summary>
        /// **(Optional, String)** The filter string to apply to the display name of the role. Uses equality.
        /// </summary>
        [Input("roleDisplayName")]
        public Input<string>? RoleDisplayName { get; set; }

        /// <summary>
        /// **(Optional, String)** The search string to apply to the display name of the entity type, like `Runtime Groups` or `Services`. Uses contains.
        /// </summary>
        [Input("searchEntityTypeDisplayName")]
        public Input<string>? SearchEntityTypeDisplayName { get; set; }

        /// <summary>
        /// **(Optional, String)** The search string to apply to the display name of the role. Uses contains.
        /// </summary>
        [Input("searchRoleDisplayName")]
        public Input<string>? SearchRoleDisplayName { get; set; }

        /// <summary>
        /// **(Required, String)** The id of the team assigned the role
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        public GetTeamRoleInvokeArgs()
        {
        }
        public static new GetTeamRoleInvokeArgs Empty => new GetTeamRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetTeamRoleResult
    {
        /// <summary>
        /// **(String)** The id of the entity for which the role applies.
        /// </summary>
        public readonly string EntityId;
        /// <summary>
        /// **(String)** The region of the entity for which the role applies.
        /// </summary>
        public readonly string EntityRegion;
        public readonly string? EntityTypeDisplayName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? RoleDisplayName;
        public readonly string? SearchEntityTypeDisplayName;
        public readonly string? SearchRoleDisplayName;
        public readonly string TeamId;

        [OutputConstructor]
        private GetTeamRoleResult(
            string entityId,

            string entityRegion,

            string? entityTypeDisplayName,

            string id,

            string? roleDisplayName,

            string? searchEntityTypeDisplayName,

            string? searchRoleDisplayName,

            string teamId)
        {
            EntityId = entityId;
            EntityRegion = entityRegion;
            EntityTypeDisplayName = entityTypeDisplayName;
            Id = id;
            RoleDisplayName = roleDisplayName;
            SearchEntityTypeDisplayName = searchEntityTypeDisplayName;
            SearchRoleDisplayName = searchRoleDisplayName;
            TeamId = teamId;
        }
    }
}
