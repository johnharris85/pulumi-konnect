// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace johnharris85.Konnect
{
    public static class GetUserRole
    {
        /// <summary>
        /// Represents a role assigned to a user
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Konnect = Pulumi.Konnect;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var user = Konnect.GetUser.Invoke(new()
        ///     {
        ///         SearchFullName = "Joe",
        ///     });
        /// 
        ///     var example = Konnect.GetUserRole.Invoke(new()
        ///     {
        ///         UserId = user.Apply(getUserResult =&gt; getUserResult.Id),
        ///         EntityTypeDisplayName = "Runtime Groups",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetUserRoleResult> InvokeAsync(GetUserRoleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserRoleResult>("konnect:index/getUserRole:getUserRole", args ?? new GetUserRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Represents a role assigned to a user
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Konnect = Pulumi.Konnect;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var user = Konnect.GetUser.Invoke(new()
        ///     {
        ///         SearchFullName = "Joe",
        ///     });
        /// 
        ///     var example = Konnect.GetUserRole.Invoke(new()
        ///     {
        ///         UserId = user.Apply(getUserResult =&gt; getUserResult.Id),
        ///         EntityTypeDisplayName = "Runtime Groups",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetUserRoleResult> Invoke(GetUserRoleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserRoleResult>("konnect:index/getUserRole:getUserRole", args ?? new GetUserRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// **(Optional, String)** The filter string to apply to the display name of the entity type. Must be `Runtime Groups` or `Services`. Uses equality.
        /// </summary>
        [Input("entityTypeDisplayName")]
        public string? EntityTypeDisplayName { get; set; }

        /// <summary>
        /// **(Optional, String)** The filter string to apply to the display name of the role. Uses equality.
        /// </summary>
        [Input("roleDisplayName")]
        public string? RoleDisplayName { get; set; }

        /// <summary>
        /// **(Optional, String)** The search string to apply to the display name of the entity type, like `Runtime Groups` or `Services`. Uses contains.
        /// </summary>
        [Input("searchEntityTypeDisplayName")]
        public string? SearchEntityTypeDisplayName { get; set; }

        /// <summary>
        /// **(Optional, String)** The search string to apply to the display name of the role. Uses contains.
        /// </summary>
        [Input("searchRoleDisplayName")]
        public string? SearchRoleDisplayName { get; set; }

        /// <summary>
        /// **(Required, String)** The id of the user assigned the role
        /// </summary>
        [Input("userId", required: true)]
        public string UserId { get; set; } = null!;

        public GetUserRoleArgs()
        {
        }
        public static new GetUserRoleArgs Empty => new GetUserRoleArgs();
    }

    public sealed class GetUserRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// **(Optional, String)** The filter string to apply to the display name of the entity type. Must be `Runtime Groups` or `Services`. Uses equality.
        /// </summary>
        [Input("entityTypeDisplayName")]
        public Input<string>? EntityTypeDisplayName { get; set; }

        /// <summary>
        /// **(Optional, String)** The filter string to apply to the display name of the role. Uses equality.
        /// </summary>
        [Input("roleDisplayName")]
        public Input<string>? RoleDisplayName { get; set; }

        /// <summary>
        /// **(Optional, String)** The search string to apply to the display name of the entity type, like `Runtime Groups` or `Services`. Uses contains.
        /// </summary>
        [Input("searchEntityTypeDisplayName")]
        public Input<string>? SearchEntityTypeDisplayName { get; set; }

        /// <summary>
        /// **(Optional, String)** The search string to apply to the display name of the role. Uses contains.
        /// </summary>
        [Input("searchRoleDisplayName")]
        public Input<string>? SearchRoleDisplayName { get; set; }

        /// <summary>
        /// **(Required, String)** The id of the user assigned the role
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public GetUserRoleInvokeArgs()
        {
        }
        public static new GetUserRoleInvokeArgs Empty => new GetUserRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserRoleResult
    {
        /// <summary>
        /// **(String)** The id of the entity for which the role applies.
        /// </summary>
        public readonly string EntityId;
        /// <summary>
        /// **(String)** The region of the entity for which the role applies.
        /// </summary>
        public readonly string EntityRegion;
        public readonly string? EntityTypeDisplayName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? RoleDisplayName;
        public readonly string? SearchEntityTypeDisplayName;
        public readonly string? SearchRoleDisplayName;
        public readonly string UserId;

        [OutputConstructor]
        private GetUserRoleResult(
            string entityId,

            string entityRegion,

            string? entityTypeDisplayName,

            string id,

            string? roleDisplayName,

            string? searchEntityTypeDisplayName,

            string? searchRoleDisplayName,

            string userId)
        {
            EntityId = entityId;
            EntityRegion = entityRegion;
            EntityTypeDisplayName = entityTypeDisplayName;
            Id = id;
            RoleDisplayName = roleDisplayName;
            SearchEntityTypeDisplayName = searchEntityTypeDisplayName;
            SearchRoleDisplayName = searchRoleDisplayName;
            UserId = userId;
        }
    }
}
