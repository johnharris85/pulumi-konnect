// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace johnharris85.Konnect
{
    /// <summary>
    /// Represents identity provider settings
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Konnect = johnharris85.Konnect;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Konnect.IdentityProvider("example", new()
    ///     {
    ///         ClientId = "XXXX",
    ///         ClientSecret = "YYYY",
    ///         EmailClaimMapping = "email",
    ///         GroupsClaimMapping = "groups",
    ///         Issuer = "https://example.com",
    ///         LoginPath = "login",
    ///         NameClaimMapping = "name",
    ///         Scopes = new[]
    ///         {
    ///             "email",
    ///             "openid",
    ///             "profile",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Identity provider can be imported using a proper value of `id` as described above
    /// </summary>
    [KonnectResourceType("konnect:index/identityProvider:IdentityProvider")]
    public partial class IdentityProvider : global::Pulumi.CustomResource
    {
        /// <summary>
        /// **(Optional, String)** Client ID of the identity provider.
        /// </summary>
        [Output("clientId")]
        public Output<string?> ClientId { get; private set; } = null!;

        /// <summary>
        /// **(Optional, String, Sensitive)** Client secret of the identity provider.
        /// </summary>
        [Output("clientSecret")]
        public Output<string?> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// **(Optional, String)** Claim to map email for the identity provider.
        /// </summary>
        [Output("emailClaimMapping")]
        public Output<string?> EmailClaimMapping { get; private set; } = null!;

        /// <summary>
        /// **(Optional, String)** Claim to map groups for the identity provider.
        /// </summary>
        [Output("groupsClaimMapping")]
        public Output<string?> GroupsClaimMapping { get; private set; } = null!;

        /// <summary>
        /// **(Optional, String)** Issuer of the identity provider.
        /// </summary>
        [Output("issuer")]
        public Output<string?> Issuer { get; private set; } = null!;

        /// <summary>
        /// **(Optional, String)** Login path of the identity provider.
        /// </summary>
        [Output("loginPath")]
        public Output<string?> LoginPath { get; private set; } = null!;

        /// <summary>
        /// **(Optional, String)** Claim to map name for the identity provider.
        /// </summary>
        [Output("nameClaimMapping")]
        public Output<string?> NameClaimMapping { get; private set; } = null!;

        /// <summary>
        /// **(Optional, List of String)** Scopes of the identity provider.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;


        /// <summary>
        /// Create a IdentityProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IdentityProvider(string name, IdentityProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("konnect:index/identityProvider:IdentityProvider", name, args ?? new IdentityProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IdentityProvider(string name, Input<string> id, IdentityProviderState? state = null, CustomResourceOptions? options = null)
            : base("konnect:index/identityProvider:IdentityProvider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/johnharris85/pulumi-konnect",
                AdditionalSecretOutputs =
                {
                    "clientSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IdentityProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IdentityProvider Get(string name, Input<string> id, IdentityProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new IdentityProvider(name, id, state, options);
        }
    }

    public sealed class IdentityProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// **(Optional, String)** Client ID of the identity provider.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// **(Optional, String, Sensitive)** Client secret of the identity provider.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// **(Optional, String)** Claim to map email for the identity provider.
        /// </summary>
        [Input("emailClaimMapping")]
        public Input<string>? EmailClaimMapping { get; set; }

        /// <summary>
        /// **(Optional, String)** Claim to map groups for the identity provider.
        /// </summary>
        [Input("groupsClaimMapping")]
        public Input<string>? GroupsClaimMapping { get; set; }

        /// <summary>
        /// **(Optional, String)** Issuer of the identity provider.
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        /// <summary>
        /// **(Optional, String)** Login path of the identity provider.
        /// </summary>
        [Input("loginPath")]
        public Input<string>? LoginPath { get; set; }

        /// <summary>
        /// **(Optional, String)** Claim to map name for the identity provider.
        /// </summary>
        [Input("nameClaimMapping")]
        public Input<string>? NameClaimMapping { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// **(Optional, List of String)** Scopes of the identity provider.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        public IdentityProviderArgs()
        {
        }
        public static new IdentityProviderArgs Empty => new IdentityProviderArgs();
    }

    public sealed class IdentityProviderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// **(Optional, String)** Client ID of the identity provider.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// **(Optional, String, Sensitive)** Client secret of the identity provider.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// **(Optional, String)** Claim to map email for the identity provider.
        /// </summary>
        [Input("emailClaimMapping")]
        public Input<string>? EmailClaimMapping { get; set; }

        /// <summary>
        /// **(Optional, String)** Claim to map groups for the identity provider.
        /// </summary>
        [Input("groupsClaimMapping")]
        public Input<string>? GroupsClaimMapping { get; set; }

        /// <summary>
        /// **(Optional, String)** Issuer of the identity provider.
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        /// <summary>
        /// **(Optional, String)** Login path of the identity provider.
        /// </summary>
        [Input("loginPath")]
        public Input<string>? LoginPath { get; set; }

        /// <summary>
        /// **(Optional, String)** Claim to map name for the identity provider.
        /// </summary>
        [Input("nameClaimMapping")]
        public Input<string>? NameClaimMapping { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// **(Optional, List of String)** Scopes of the identity provider.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        public IdentityProviderState()
        {
        }
        public static new IdentityProviderState Empty => new IdentityProviderState();
    }
}
